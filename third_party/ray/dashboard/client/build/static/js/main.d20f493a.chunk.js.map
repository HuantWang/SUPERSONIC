{"version":3,"sources":["api.ts","pages/dashboard/LastUpdated.tsx","pages/dashboard/logical-view/Actor.tsx","pages/dashboard/logical-view/Actors.tsx","pages/dashboard/logical-view/LogicalView.tsx","pages/dashboard/state.ts","pages/dashboard/memory/MemorySummary.tsx","pages/dashboard/memory/MemoryRowGroup.tsx","pages/dashboard/memory/Memory.tsx","common/util.ts","common/DialogWithTitle.tsx","common/NumberedLines.tsx","pages/dashboard/node-info/dialogs/errors/Errors.tsx","pages/dashboard/node-info/dialogs/logs/Logs.tsx","common/UsageBar.tsx","pages/dashboard/node-info/features/CPU.tsx","common/formatUtils.ts","pages/dashboard/node-info/features/Disk.tsx","common/SpanButton.tsx","pages/dashboard/node-info/features/Errors.tsx","pages/dashboard/node-info/features/GPU.tsx","pages/dashboard/node-info/features/GRAM.tsx","pages/dashboard/node-info/features/Host.tsx","pages/dashboard/node-info/features/Logs.tsx","pages/dashboard/node-info/features/RAM.tsx","pages/dashboard/node-info/features/Received.tsx","pages/dashboard/node-info/features/Sent.tsx","pages/dashboard/node-info/features/Uptime.tsx","pages/dashboard/node-info/features/Workers.tsx","pages/dashboard/node-info/NodeRowGroup.tsx","pages/dashboard/node-info/TotalRow.tsx","pages/dashboard/node-info/NodeInfo.tsx","pages/dashboard/ray-config/RayConfig.tsx","pages/dashboard/tune/TuneErrors.tsx","pages/dashboard/tune/TuneTable.tsx","pages/dashboard/tune/TuneTensorBoard.tsx","pages/dashboard/tune/Tune.tsx","pages/dashboard/Dashboard.tsx","store.ts","App.tsx","index.tsx"],"names":["base","window","location","origin","get","path","params","a","url","URL","Object","entries","key","value","searchParams","set","fetch","toString","response","json","result","error","Error","post","requestOptions","method","headers","body","JSON","stringify","getRayConfig","getNodeInfo","getRayletInfo","getErrors","hostname","pid","getLogs","launchProfiling","nodeId","duration","node_id","checkProfilingStatus","profilingId","profiling_id","getProfilingResultURL","encodeURIComponent","launchKillActor","actorId","actorIpAddress","actorPort","actor_id","ip_address","port","getTuneInfo","getTuneAvailability","setTuneExperiment","experiment","enableTuneTensorBoard","getMemoryTable","shouldObtainMemoryTable","stopMemoryTableCollection","LastUpdated","this","props","classes","lastUpdatedAt","className","root","Typography","lastUpdated","Date","toLocaleString","React","Component","connect","state","dashboard","withStyles","theme","createStyles","marginTop","spacing","color","palette","text","secondary","fontSize","textAlign","main","Actor","expanded","profiling","setExpanded","setState","handleProfilingClick","actor","startTime","now","latestResponse","checkProfilingStatusLoop","status","setTimeout","killActor","ipAddress","information","label","actorTitle","usedResources","length","sort","b","localeCompare","map","join","taskQueueLength","numExecutedTasks","numObjectIdsInScope","numLocalObjects","usedObjectStoreMemory","requiredResources","actorCustomDisplay","webuiDisplay","keys","_","__","valueEncoded","valueParsed","parse","valueRendered","inlineHTML","dangerouslySetInnerHTML","__html","title","Fragment","children","action","onClick","Math","round","href","rel","target","trim","undefined","invalidStateType","invalidStateTypeInfeasible","invalidStateTypePendingActor","datum","Collapse","in","actors","borderColor","divider","borderStyle","borderWidth","padding","primary","textDecoration","cursor","marginLeft","display","Actors","LogicalView","rayletInfo","warning","marginBottom","warningIcon","verticalAlign","slice","createSlice","name","initialState","tab","rayConfig","nodeInfo","tuneInfo","tuneAvailability","memoryTable","reducers","setTab","payload","setRayConfig","setNodeAndRayletInfo","setTuneInfo","setTuneAvailability","setError","setMemoryTable","setShouldObtainMemoryTable","dashboardActions","actions","dashboardReducer","reducer","MemorySummary","initialExpanded","toggleExpand","memoryTableSummary","memorySummaries","total_local_ref_count","total_pinned_in_memory","total_used_by_pending_task","total_captured_in_objects","total_object_size","total_actor_handles","TableRow","hover","summary","index","TableCell","cell","paddingRight","expandCollapseCell","expandCollapseIcon","extraInfo","fontFamily","whiteSpace","MemoryRowGroup","groupKey","memoryTableGroups","memoryTableGroup","classNames","feature","memoryTableEntry","object_size","memoryTableEntryValues","node_ip_address","type","object_id","reference_type","call_site","mapDispatchToProps","MemoryInfo","handlePauseMemoryTable","renderIcon","Button","Table","table","TableHead","header","TableBody","group","group_key","getWeightedAverage","input","totalWeightTimesValue","totalWeight","weight","sum","vals","reduce","acc","val","DialogWithTitle","handleClose","Dialog","paper","fullWidth","maxWidth","onClose","open","scroll","IconButton","closeButton","position","right","top","zIndex","borderBottomColor","borderBottomStyle","borderBottomWidth","lineHeight","paddingBottom","NumberedLines","lines","line","lineNumber","data-line-number","overflowX","width","content","Errors","clearErrorDialog","errors","message","timestamp","split","backgroundColor","fade","borderLeftColor","borderLeftStyle","borderLeftWidth","Logs","clearLogDialog","log","UsageBar","percent","max","minColor","leftColor","rightColor","ratio","r1","g1","b1","blend","min","gradient","inner","style","background","paddingLeft","ClusterCPU","nodes","cpuWeightedAverage","node","cpus","cpu","minWidth","toFixed","NodeCPU","WorkerCPU","worker","cpu_percent","formatByteAmount","amount","unit","pow","formatUsage","used","total","usedFormatted","totalFormatted","formatDuration","durationInSeconds","durationSeconds","floor","durationMinutes","durationHours","durationDays","pad","padStart","formatValue","rawFloat","abs","valueOf","toPrecision","toExponential","e","ClusterDisk","disk","NodeDisk","WorkerDisk","component","variant","SpanButton","otherProps","button","makeClusterErrors","errorCounts","totalErrorCount","ip","makeNodeErrors","setErrorDialog","makeWorkerErrors","perWorker","nodeUtilization","gpus","gpu","utilization_gpu","NaN","ClusterGPU","clusterAverageUtilization","utils","filter","util","isNaN","clusterUtilization","NodeGPU","nodeUtil","WorkerGPU","rayletWorker","workerRes","coreWorkerStats","workerUsedGPUResources","nodeGRAMUtilization","memory_used","memory_total","utilization","ClusterGRAM","clusterGRAMUtilization","NodeGRAM","gramUtil","WorkerGRAM","workerUtilPerGPU","processes","find","process","proc","gpu_memory_usage","totalNodeGRAM","usedGRAM","ClusterHost","NodeHost","WorkerHost","cmdline","makeClusterLogs","logCounts","totalLogCount","makeNodeLogs","setLogDialog","makeWorkerLogs","ClusterRAM","mem","NodeRAM","WorkerRAM","memory_info","rss","ClusterReceived","totalReceived","net","NodeReceived","WorkerReceived","ClusterSent","totalSent","NodeSent","WorkerSent","getUptime","bootTime","ClusterUptime","NodeUptime","boot_time","WorkerUptime","create_time","WorkerWorkers","NodeRowGroup","totalWorkers","raylet","clusterWorkers","features","NodeFeature","WorkerFeature","colSpan","workersStats","TotalRow","clusterTotalWorkers","ClusterFeature","totalCpus","totalIcon","borderTopColor","borderTopStyle","borderTopWidth","NodeInfo","logDialog","errorDialog","clusterWorkerPidsByIp","nodeMap","Map","workerPids","Set","nodeIp","isDriver","add","clusterWorkerPids","Array","from","values","workerSet","size","clients","client","filteredLogEntries","log_counts","has","totalLogEntries","fromEntries","filteredErrEntries","error_counts","totalErrEntries","workers","w1","w2","RayConfig","refreshRayConfig","formattedRayConfig","autoscaling_mode","head_type","worker_type","min_workers","initial_workers","max_workers","idle_timeout_minutes","paddingTop","TuneErrors","currentError","handleOpen","job_id","trial_id","Link","TuneTable","timeout","sortedColumn","ascending","metricParamColumn","metricColumns","paramColumns","errorTrial","onColumnClick","column","humanize","str","part","charAt","toUpperCase","sortedCell","chosenMetricParam","active","TableSortLabel","direction","sortedTrialRecords","trial_records","trialDetails","getAttribute","trial","handleMetricChoiceChange","event","checked","push","metricChoices","metricNames","FormControl","FormLabel","FormGroup","FormControlLabel","control","Checkbox","includes","onChange","handleParamChoiceChange","paramChoices","paramNames","paramChecklist","firstTrial","paramsDict","k","viewableParams","paramOptions","metrics","viewableMetrics","metricOptions","Grid","container","item","xs","checkboxRoot","stickyHeader","Number","height","overflowY","TuneTensorBoard","tensorBoardEnabled","loading","handleSubmit","then","tensorBoard","tensorboard","tensorboard_current","src","board","enabled","tensorboard_enabled","CircularProgress","progress","border","Tune","tabIndex","refreshTuneInfo","available","handleTabChange","handleExperimentChange","handleExperimentSubmit","clearTimeout","experimentChoice","prompt","heading","TextField","id","submit","trials_available","tabs","SelectedComponent","Tabs","indicatorColor","textColor","Tab","fontsize","formControl","margin","Dashboard","timeoutId","refreshInfo","Promise","all","splice","store","configureStore","devTools","App","CssBaseline","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d20f493a.chunk.js","sourcesContent":["const base =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8265\"\n    : window.location.origin;\n\n// TODO(mitchellstern): Add JSON schema validation for the responses.\nconst get = async <T>(path: string, params: { [key: string]: any }) => {\n  const url = new URL(path, base);\n  for (const [key, value] of Object.entries(params)) {\n    url.searchParams.set(key, value);\n  }\n\n  const response = await fetch(url.toString());\n  const json = await response.json();\n\n  const { result, error } = json;\n\n  if (error !== null) {\n    throw Error(error);\n  }\n\n  return result as T;\n};\n\nconst post = async <T>(path: string, params: { [key: string]: any }) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(params),\n  };\n\n  const url = new URL(path, base);\n\n  const response = await fetch(url.toString(), requestOptions);\n  const json = await response.json();\n\n  const { result, error } = json;\n\n  if (error !== null) {\n    throw Error(error);\n  }\n\n  return result as T;\n};\n\nexport type RayConfigResponse = {\n  min_workers: number;\n  max_workers: number;\n  initial_workers: number;\n  autoscaling_mode: string;\n  idle_timeout_minutes: number;\n  head_type: string;\n  worker_type: string;\n};\n\nexport const getRayConfig = () => get<RayConfigResponse>(\"/api/ray_config\", {});\n\nexport type NodeInfoResponseWorker = {\n  pid: number;\n  create_time: number;\n  cmdline: string[];\n  cpu_percent: number;\n  cpu_times: {\n    system: number;\n    children_system: number;\n    user: number;\n    children_user: number;\n  };\n  memory_info: {\n    pageins: number;\n    pfaults: number;\n    vms: number;\n    rss: number;\n  };\n};\n\nexport type GPUProcessStats = {\n  // Sub stat of GPU stats, this type represents the GPU\n  // utilization of a single process of a single GPU.\n  username: string;\n  command: string;\n  gpu_memory_usage: number;\n  pid: number;\n};\n\nexport type GPUStats = {\n  // This represents stats fetched from a node about a single GPU\n  uuid: string;\n  name: string;\n  temperature_gpu: number;\n  fan_speed: number;\n  utilization_gpu: number;\n  power_draw: number;\n  enforced_power_limit: number;\n  memory_used: number;\n  memory_total: number;\n  processes: Array<GPUProcessStats>;\n};\n\nexport type NodeInfoResponse = {\n  clients: Array<{\n    now: number;\n    hostname: string;\n    ip: string;\n    boot_time: number; // System boot time expressed in seconds since epoch\n    cpu: number; // System-wide CPU utilization expressed as a percentage\n    cpus: [number, number]; // Number of logical CPUs and physical CPUs\n    gpus: Array<GPUStats>; // GPU stats fetched from node, 1 entry per GPU\n    mem: [number, number, number]; // Total, available, and used percentage of memory\n    disk: {\n      [path: string]: {\n        total: number;\n        free: number;\n        used: number;\n        percent: number;\n      };\n    };\n    load_avg: [[number, number, number], [number, number, number]];\n    net: [number, number]; // Sent and received network traffic in bytes / second\n    workers: Array<NodeInfoResponseWorker>;\n  }>;\n  log_counts: {\n    [ip: string]: {\n      [pid: string]: number;\n    };\n  };\n  error_counts: {\n    [ip: string]: {\n      [pid: string]: number;\n    };\n  };\n};\n\nexport const getNodeInfo = () => get<NodeInfoResponse>(\"/api/node_info\", {});\n\nexport type RayletCoreWorkerStats = {\n  usedResources: {\n    [key: string]: number;\n  };\n};\n\nexport type RayletWorkerStats = {\n  pid: number;\n  isDriver?: boolean;\n  coreWorkerStats: RayletCoreWorkerStats;\n};\n\nexport type RayletActorInfo =\n  | {\n      actorId: string;\n      actorTitle: string;\n      averageTaskExecutionSpeed: number;\n      children: RayletInfoResponse[\"actors\"];\n      // currentTaskFuncDesc: string[];\n      ipAddress: string;\n      jobId: string;\n      nodeId: string;\n      numExecutedTasks: number;\n      numLocalObjects: number;\n      numObjectIdsInScope: number;\n      pid: number;\n      port: number;\n      state: 0 | 1 | 2;\n      taskQueueLength: number;\n      timestamp: number;\n      usedObjectStoreMemory: number;\n      usedResources: { [key: string]: number };\n      currentTaskDesc?: string;\n      numPendingTasks?: number;\n      webuiDisplay?: Record<string, string>;\n    }\n  | {\n      actorId: string;\n      actorTitle: string;\n      requiredResources: { [key: string]: number };\n      state: -1;\n      invalidStateType?: \"infeasibleActor\" | \"pendingActor\";\n    };\n\nexport type RayletInfoResponse = {\n  nodes: {\n    [ip: string]: {\n      extraInfo?: string;\n      workersStats: Array<RayletWorkerStats>;\n    };\n  };\n  actors: {\n    [actorId: string]:\n      | {\n          actorId: string;\n          actorTitle: string;\n          averageTaskExecutionSpeed: number;\n          children: RayletInfoResponse[\"actors\"];\n          // currentTaskFuncDesc: string[];\n          ipAddress: string;\n          jobId: string;\n          nodeId: string;\n          numExecutedTasks: number;\n          numLocalObjects: number;\n          numObjectIdsInScope: number;\n          pid: number;\n          port: number;\n          state: 0 | 1 | 2;\n          taskQueueLength: number;\n          timestamp: number;\n          usedObjectStoreMemory: number;\n          usedResources: { [key: string]: number };\n          currentTaskDesc?: string;\n          numPendingTasks?: number;\n          webuiDisplay?: Record<string, string>;\n        }\n      | {\n          actorId: string;\n          actorTitle: string;\n          requiredResources: { [key: string]: number };\n          state: -1;\n          invalidStateType?: \"infeasibleActor\" | \"pendingActor\";\n        };\n  };\n};\n\nexport const getRayletInfo = () =>\n  get<RayletInfoResponse>(\"/api/raylet_info\", {});\n\nexport type ErrorsResponse = {\n  [pid: string]: Array<{\n    message: string;\n    timestamp: number;\n    type: string;\n  }>;\n};\n\nexport const getErrors = (hostname: string, pid: number | null) =>\n  get<ErrorsResponse>(\"/api/errors\", {\n    hostname,\n    pid: pid === null ? \"\" : pid,\n  });\n\nexport type LogsResponse = {\n  [pid: string]: string[];\n};\n\nexport const getLogs = (hostname: string, pid: number | null) =>\n  get<LogsResponse>(\"/api/logs\", {\n    hostname,\n    pid: pid === null ? \"\" : pid,\n  });\n\nexport type LaunchProfilingResponse = string;\n\nexport const launchProfiling = (\n  nodeId: string,\n  pid: number,\n  duration: number,\n) =>\n  get<LaunchProfilingResponse>(\"/api/launch_profiling\", {\n    node_id: nodeId,\n    pid: pid,\n    duration: duration,\n  });\n\nexport type CheckProfilingStatusResponse =\n  | { status: \"pending\" }\n  | { status: \"finished\" }\n  | { status: \"error\"; error: string };\n\nexport const checkProfilingStatus = (profilingId: string) =>\n  get<CheckProfilingStatusResponse>(\"/api/check_profiling_status\", {\n    profiling_id: profilingId,\n  });\n\nexport const getProfilingResultURL = (profilingId: string) =>\n  `${base}/speedscope/index.html#profileURL=${encodeURIComponent(\n    `${base}/api/get_profiling_info?profiling_id=${profilingId}`,\n  )}`;\n\nexport const launchKillActor = (\n  actorId: string,\n  actorIpAddress: string,\n  actorPort: number,\n) =>\n  get<object>(\"/api/kill_actor\", {\n    // make sure object is okay\n    actor_id: actorId,\n    ip_address: actorIpAddress,\n    port: actorPort,\n  });\n\nexport type TuneTrial = {\n  date: string;\n  episodes_total: string;\n  experiment_id: string;\n  experiment_tag: string;\n  hostname: string;\n  iterations_since_restore: number;\n  logdir: string;\n  node_ip: string;\n  pid: number;\n  time_since_restore: number;\n  time_this_iter_s: number;\n  time_total_s: number;\n  timestamp: number;\n  timesteps_since_restore: number;\n  timesteps_total: number;\n  training_iteration: number;\n  start_time: string;\n  status: string;\n  trial_id: string | number;\n  job_id: string;\n  params: { [key: string]: string | number };\n  metrics: { [key: string]: string | number };\n  error: string;\n};\n\nexport type TuneError = {\n  text: string;\n  job_id: string;\n  trial_id: string;\n};\n\nexport type TuneJobResponse = {\n  trial_records: { [key: string]: TuneTrial };\n  errors: { [key: string]: TuneError };\n  tensorboard: {\n    tensorboard_current: boolean;\n    tensorboard_enabled: boolean;\n  };\n};\n\nexport const getTuneInfo = () => get<TuneJobResponse>(\"/api/tune_info\", {});\n\nexport type TuneAvailabilityResponse = {\n  available: boolean;\n  trials_available: boolean;\n};\n\nexport const getTuneAvailability = () =>\n  get<TuneAvailabilityResponse>(\"/api/tune_availability\", {});\n\nexport type TuneSetExperimentReponse = {\n  experiment: string;\n};\n\nexport const setTuneExperiment = (experiment: string) =>\n  post<TuneSetExperimentReponse>(\"/api/set_tune_experiment\", {\n    experiment: experiment,\n  });\n\nexport const enableTuneTensorBoard = () =>\n  post<{}>(\"/api/enable_tune_tensorboard\", {});\n\nexport type MemoryTableSummary = {\n  total_actor_handles: number;\n  total_captured_in_objects: number;\n  total_local_ref_count: number;\n  // The measurement is B.\n  total_object_size: number;\n  total_pinned_in_memory: number;\n  total_used_by_pending_task: number;\n} | null;\n\nexport type MemoryTableEntry = {\n  node_ip_address: string;\n  pid: number;\n  type: string;\n  object_id: string;\n  object_size: number;\n  reference_type: string;\n  call_site: string;\n};\n\nexport type MemoryTableResponse = {\n  group: {\n    [groupKey: string]: {\n      entries: MemoryTableEntry[];\n      summary: MemoryTableSummary;\n    };\n  };\n  summary: MemoryTableSummary;\n};\n\n// This doesn't return anything.\nexport type StopMemoryTableResponse = {};\n\nexport const getMemoryTable = (shouldObtainMemoryTable: boolean) => {\n  if (shouldObtainMemoryTable) {\n    return get<MemoryTableResponse>(\"/api/memory_table\", {});\n  } else {\n    return null;\n  }\n};\n\nexport const stopMemoryTableCollection = () =>\n  get<StopMemoryTableResponse>(\"/api/stop_memory_table\", {});\n","import {\n  createStyles,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../store\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(2),\n    },\n    lastUpdated: {\n      color: theme.palette.text.secondary,\n      fontSize: \"0.8125rem\",\n      textAlign: \"center\",\n    },\n    error: {\n      color: theme.palette.error.main,\n      fontSize: \"0.8125rem\",\n      textAlign: \"center\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  lastUpdatedAt: state.dashboard.lastUpdatedAt,\n  error: state.dashboard.error,\n});\n\nclass LastUpdated extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  render() {\n    const { classes, lastUpdatedAt, error } = this.props;\n    return (\n      <div className={classes.root}>\n        {lastUpdatedAt !== null && (\n          <Typography className={classes.lastUpdated}>\n            Last updated: {new Date(lastUpdatedAt).toLocaleString()}\n          </Typography>\n        )}\n        {error !== null && (\n          <Typography className={classes.error}>{error}</Typography>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(LastUpdated));\n","import {\n  Collapse,\n  createStyles,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport {\n  checkProfilingStatus,\n  CheckProfilingStatusResponse,\n  getProfilingResultURL,\n  launchKillActor,\n  launchProfiling,\n  RayletInfoResponse,\n} from \"../../../api\";\nimport Actors from \"./Actors\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n      marginTop: theme.spacing(2),\n      padding: theme.spacing(2),\n    },\n    title: {\n      color: theme.palette.text.secondary,\n      fontSize: \"0.75rem\",\n    },\n    action: {\n      color: theme.palette.primary.main,\n      textDecoration: \"none\",\n      \"&:hover\": {\n        cursor: \"pointer\",\n      },\n    },\n    invalidStateTypeInfeasible: {\n      color: theme.palette.error.main,\n    },\n    invalidStateTypePendingActor: {\n      color: theme.palette.secondary.main,\n    },\n    information: {\n      fontSize: \"0.875rem\",\n    },\n    datum: {\n      \"&:not(:first-child)\": {\n        marginLeft: theme.spacing(2),\n      },\n    },\n    webuiDisplay: {\n      fontSize: \"0.875rem\",\n    },\n    inlineHTML: {\n      fontSize: \"0.875rem\",\n      display: \"inline\",\n    },\n  });\n\ntype Props = {\n  actor: RayletInfoResponse[\"actors\"][keyof RayletInfoResponse[\"actors\"]];\n};\n\ntype State = {\n  expanded: boolean;\n  profiling: {\n    [profilingId: string]: {\n      startTime: number;\n      latestResponse: CheckProfilingStatusResponse | null;\n    };\n  };\n};\n\nclass Actor extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    expanded: true,\n    profiling: {},\n  };\n\n  setExpanded = (expanded: boolean) => () => {\n    this.setState({ expanded });\n  };\n\n  handleProfilingClick = (duration: number) => async () => {\n    const actor = this.props.actor;\n    if (actor.state !== -1) {\n      const profilingId = await launchProfiling(\n        actor.nodeId,\n        actor.pid,\n        duration,\n      );\n      this.setState((state) => ({\n        profiling: {\n          ...state.profiling,\n          [profilingId]: { startTime: Date.now(), latestResponse: null },\n        },\n      }));\n      const checkProfilingStatusLoop = async () => {\n        const response = await checkProfilingStatus(profilingId);\n        this.setState((state) => ({\n          profiling: {\n            ...state.profiling,\n            [profilingId]: {\n              ...state.profiling[profilingId],\n              latestResponse: response,\n            },\n          },\n        }));\n        if (response.status === \"pending\") {\n          setTimeout(checkProfilingStatusLoop, 1000);\n        }\n      };\n      await checkProfilingStatusLoop();\n    }\n  };\n\n  killActor = () => {\n    const actor = this.props.actor;\n    if (actor.state === 0) {\n      launchKillActor(actor.actorId, actor.ipAddress, actor.port);\n    }\n  };\n\n  render() {\n    const { classes, actor } = this.props;\n    const { expanded, profiling } = this.state;\n\n    const information =\n      actor.state !== -1\n        ? [\n            {\n              label: \"ActorTitle\",\n              value: actor.actorTitle,\n            },\n            {\n              label: \"State\",\n              value: actor.state.toLocaleString(),\n            },\n            {\n              label: \"Resources\",\n              value:\n                Object.entries(actor.usedResources).length > 0 &&\n                Object.entries(actor.usedResources)\n                  .sort((a, b) => a[0].localeCompare(b[0]))\n                  .map(([key, value]) => `${value.toLocaleString()} ${key}`)\n                  .join(\", \"),\n            },\n            {\n              label: \"Pending\",\n              value: actor.taskQueueLength.toLocaleString(),\n            },\n            {\n              label: \"Executed\",\n              value: actor.numExecutedTasks.toLocaleString(),\n            },\n            {\n              label: \"NumObjectIdsInScope\",\n              value: actor.numObjectIdsInScope.toLocaleString(),\n            },\n            {\n              label: \"NumLocalObjects\",\n              value: actor.numLocalObjects.toLocaleString(),\n            },\n            {\n              label: \"UsedLocalObjectMemory\",\n              value: actor.usedObjectStoreMemory.toLocaleString(),\n            },\n            // {\n            //   label: \"Task\",\n            //   value: actor.currentTaskFuncDesc.join(\".\")\n            // }\n          ]\n        : [\n            {\n              label: \"ID\",\n              value: actor.actorId,\n            },\n            {\n              label: \"Required resources\",\n              value:\n                Object.entries(actor.requiredResources).length > 0 &&\n                Object.entries(actor.requiredResources)\n                  .sort((a, b) => a[0].localeCompare(b[0]))\n                  .map(([key, value]) => `${value.toLocaleString()} ${key}`)\n                  .join(\", \"),\n            },\n          ];\n\n    // Construct the custom message from the actor.\n    let actorCustomDisplay: JSX.Element[] = [];\n    if (actor.state !== -1 && actor.webuiDisplay) {\n      actorCustomDisplay = Object.keys(actor.webuiDisplay)\n        .sort()\n        .map((key, _, __) => {\n          // Construct the value from actor.\n          // Please refer to worker.py::show_in_webui for schema.\n          const valueEncoded = actor.webuiDisplay![key];\n          const valueParsed = JSON.parse(valueEncoded);\n          let valueRendered = valueParsed[\"message\"];\n          if (valueParsed[\"dtype\"] === \"html\") {\n            valueRendered = (\n              <div\n                className={classes.inlineHTML}\n                dangerouslySetInnerHTML={{ __html: valueRendered }}\n              ></div>\n            );\n          }\n\n          if (key === \"\") {\n            return (\n              <Typography className={classes.webuiDisplay}>\n                &nbsp; &nbsp; {valueRendered}\n              </Typography>\n            );\n          } else {\n            return (\n              <Typography className={classes.webuiDisplay}>\n                &nbsp; &nbsp; {key}: {valueRendered}\n              </Typography>\n            );\n          }\n        });\n    }\n\n    return (\n      <div className={classes.root}>\n        <Typography className={classes.title}>\n          {actor.state !== -1 ? (\n            <React.Fragment>\n              Actor {actor.actorId}{\" \"}\n              {Object.entries(actor.children).length > 0 && (\n                <React.Fragment>\n                  (\n                  <span\n                    className={classes.action}\n                    onClick={this.setExpanded(!expanded)}\n                  >\n                    {expanded ? \"Collapse\" : \"Expand\"}\n                  </span>\n                  )\n                </React.Fragment>\n              )}{\" \"}\n              (Profile for\n              {[10, 30, 60].map((duration) => (\n                <React.Fragment>\n                  {\" \"}\n                  <span\n                    className={classes.action}\n                    onClick={this.handleProfilingClick(duration)}\n                  >\n                    {duration}s\n                  </span>\n                </React.Fragment>\n              ))}\n              ){\" \"}\n              {actor.state === 0 && (\n                <span className={classes.action} onClick={this.killActor}>\n                  Kill Actor\n                </span>\n              )}\n              {Object.entries(profiling).map(\n                ([profilingId, { startTime, latestResponse }]) =>\n                  latestResponse !== null && (\n                    <React.Fragment>\n                      (\n                      {latestResponse.status === \"pending\" ? (\n                        `Profiling for ${Math.round(\n                          (Date.now() - startTime) / 1000,\n                        )}s...`\n                      ) : latestResponse.status === \"finished\" ? (\n                        <a\n                          className={classes.action}\n                          href={getProfilingResultURL(profilingId)}\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          Profiling result\n                        </a>\n                      ) : latestResponse.status === \"error\" ? (\n                        `Profiling error: ${latestResponse.error.trim()}`\n                      ) : undefined}\n                      ){\" \"}\n                    </React.Fragment>\n                  ),\n              )}\n            </React.Fragment>\n          ) : actor.invalidStateType === \"infeasibleActor\" ? (\n            <span className={classes.invalidStateTypeInfeasible}>\n              {actor.actorTitle} is infeasible. (This actor cannot be created\n              because the Ray cluster cannot satisfy its resource requirements.)\n            </span>\n          ) : (\n            <span className={classes.invalidStateTypePendingActor}>\n              {actor.actorTitle} is pending until resources are available.\n            </span>\n          )}\n        </Typography>\n        <Typography className={classes.information}>\n          {information.map(\n            ({ label, value }) =>\n              value &&\n              value.length > 0 && (\n                <React.Fragment key={label}>\n                  <span className={classes.datum}>\n                    {label}: {value}\n                  </span>{\" \"}\n                </React.Fragment>\n              ),\n          )}\n        </Typography>\n        {actor.state !== -1 && (\n          <React.Fragment>\n            {actorCustomDisplay.length > 0 && (\n              <React.Fragment>{actorCustomDisplay}</React.Fragment>\n            )}\n\n            <Collapse in={expanded}>\n              <Actors actors={actor.children} />\n            </Collapse>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Actor);\n","import { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { RayletInfoResponse } from \"../../../api\";\nimport Actor from \"./Actor\";\n\nconst styles = (theme: Theme) => createStyles({});\n\ntype Props = {\n  actors: RayletInfoResponse[\"actors\"];\n};\n\nclass Actors extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { actors } = this.props;\n    return Object.entries(actors).map(([actorId, actor]) => (\n      <Actor actor={actor} key={actorId} />\n    ));\n  }\n}\n\nexport default withStyles(styles)(Actors);\n","import {\n  createStyles,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreState } from \"../../../store\";\nimport Actors from \"./Actors\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    warning: {\n      fontSize: \"0.8125rem\",\n      marginBottom: theme.spacing(2),\n    },\n    warningIcon: {\n      fontSize: \"1.25em\",\n      verticalAlign: \"text-bottom\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  rayletInfo: state.dashboard.rayletInfo,\n});\n\nclass LogicalView extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  render() {\n    const { rayletInfo } = this.props;\n    return (\n      <div>\n        {rayletInfo === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : Object.entries(rayletInfo.actors).length === 0 ? (\n          <Typography color=\"textSecondary\">No actors found.</Typography>\n        ) : (\n          <Actors actors={rayletInfo.actors} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(LogicalView));\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  MemoryTableResponse,\n  NodeInfoResponse,\n  RayConfigResponse,\n  RayletInfoResponse,\n  TuneAvailabilityResponse,\n  TuneJobResponse,\n} from \"../../api\";\n\nconst name = \"dashboard\";\n\ntype State = {\n  tab: number;\n  rayConfig: RayConfigResponse | null;\n  nodeInfo: NodeInfoResponse | null;\n  rayletInfo: RayletInfoResponse | null;\n  tuneInfo: TuneJobResponse | null;\n  tuneAvailability: TuneAvailabilityResponse | null;\n  lastUpdatedAt: number | null;\n  error: string | null;\n  memoryTable: MemoryTableResponse | null;\n  shouldObtainMemoryTable: boolean;\n};\n\nconst initialState: State = {\n  tab: 0,\n  rayConfig: null,\n  nodeInfo: null,\n  rayletInfo: null,\n  tuneInfo: null,\n  tuneAvailability: null,\n  lastUpdatedAt: null,\n  error: null,\n  memoryTable: null,\n  shouldObtainMemoryTable: false,\n};\n\nconst slice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    setTab: (state, action: PayloadAction<number>) => {\n      state.tab = action.payload;\n    },\n    setRayConfig: (state, action: PayloadAction<RayConfigResponse>) => {\n      state.rayConfig = action.payload;\n    },\n    setNodeAndRayletInfo: (\n      state,\n      action: PayloadAction<{\n        nodeInfo: NodeInfoResponse;\n        rayletInfo: RayletInfoResponse;\n      }>,\n    ) => {\n      state.nodeInfo = action.payload.nodeInfo;\n      state.rayletInfo = action.payload.rayletInfo;\n      state.lastUpdatedAt = Date.now();\n    },\n    setTuneInfo: (state, action: PayloadAction<TuneJobResponse>) => {\n      state.tuneInfo = action.payload;\n      state.lastUpdatedAt = Date.now();\n    },\n    setTuneAvailability: (\n      state,\n      action: PayloadAction<TuneAvailabilityResponse>,\n    ) => {\n      state.tuneAvailability = action.payload;\n      state.lastUpdatedAt = Date.now();\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    },\n    setMemoryTable: (\n      state,\n      action: PayloadAction<MemoryTableResponse | null>,\n    ) => {\n      state.memoryTable = action.payload;\n    },\n    setShouldObtainMemoryTable: (state, action: PayloadAction<boolean>) => {\n      state.shouldObtainMemoryTable = action.payload;\n    },\n  },\n});\n\nexport const dashboardActions = slice.actions;\nexport const dashboardReducer = slice.reducer;\n","import {\n  createStyles,\n  TableCell,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { MemoryTableSummary } from \"../../../api\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    expandCollapseCell: {\n      cursor: \"pointer\",\n    },\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n    extraInfo: {\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      whiteSpace: \"pre\",\n    },\n  });\n\ntype Props = {\n  memoryTableSummary: MemoryTableSummary;\n  initialExpanded: boolean;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nclass MemorySummary extends React.Component<\n  Props & WithStyles<typeof styles>,\n  State\n> {\n  state: State = {\n    expanded: this.props.initialExpanded,\n  };\n\n  toggleExpand = () => {\n    this.setState((state) => ({\n      expanded: !state.expanded,\n    }));\n  };\n\n  render() {\n    const { classes, memoryTableSummary } = this.props;\n\n    const memorySummaries =\n      memoryTableSummary !== null\n        ? [\n            \"\", // Padding\n            `Total Local Reference Count: ${memoryTableSummary.total_local_ref_count}`,\n            `Total Pinned In Memory Count: ${memoryTableSummary.total_pinned_in_memory}`,\n            `Total Used By Pending Tasks Count: ${memoryTableSummary.total_used_by_pending_task}`,\n            `Total Caputed In Objects Count: ${memoryTableSummary.total_captured_in_objects}`,\n            `Total Object Size: ${memoryTableSummary.total_object_size} B`,\n            `Total Actor Handle Count: ${memoryTableSummary.total_actor_handles}`,\n            \"\", // Padding\n          ]\n        : [\"No Summary Provided\"];\n\n    return (\n      memoryTableSummary !== null && (\n        <React.Fragment>\n          <TableRow hover>\n            {memorySummaries.map((summary, index) => (\n              <TableCell key={index} className={classes.cell}>\n                {summary}\n              </TableCell>\n            ))}\n          </TableRow>\n        </React.Fragment>\n      )\n    );\n  }\n}\n\nexport default withStyles(styles)(MemorySummary);\n","import {\n  createStyles,\n  TableCell,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport {\n  MemoryTableEntry,\n  MemoryTableResponse,\n  MemoryTableSummary,\n} from \"../../../api\";\nimport MemorySummary from \"./MemorySummary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n    },\n    expandCollapseCell: {\n      cursor: \"pointer\",\n    },\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n    extraInfo: {\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      whiteSpace: \"pre\",\n    },\n  });\n\ntype Props = {\n  groupKey: string;\n  memoryTableGroups: MemoryTableResponse[\"group\"];\n  initialExpanded: boolean;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nclass MemoryRowGroup extends React.Component<\n  Props & WithStyles<typeof styles>,\n  State\n> {\n  state: State = {\n    expanded: this.props.initialExpanded,\n  };\n\n  toggleExpand = () => {\n    this.setState((state) => ({\n      expanded: !state.expanded,\n    }));\n  };\n\n  render() {\n    const { classes, groupKey, memoryTableGroups } = this.props;\n    const { expanded } = this.state;\n\n    const features = [\n      \"node_ip_address\",\n      \"pid\",\n      \"type\",\n      \"object_id\",\n      \"object_size\",\n      \"reference_type\",\n      \"call_site\",\n    ];\n\n    const memoryTableGroup = memoryTableGroups[groupKey];\n    const entries: Array<MemoryTableEntry> = memoryTableGroup[\"entries\"];\n    const summary: MemoryTableSummary = memoryTableGroup[\"summary\"];\n\n    return (\n      <React.Fragment>\n        <TableRow hover>\n          <TableCell\n            className={classNames(classes.cell, classes.expandCollapseCell)}\n            onClick={this.toggleExpand}\n          >\n            {!expanded ? (\n              <AddIcon className={classes.expandCollapseIcon} />\n            ) : (\n              <RemoveIcon className={classes.expandCollapseIcon} />\n            )}\n          </TableCell>\n          {features.map((feature, index) => (\n            <TableCell className={classes.cell} key={index}>\n              {// TODO(sang): For now, it is always grouped by node_ip_address.\n              feature === \"node_ip_address\" ? groupKey : \"\"}\n            </TableCell>\n          ))}\n        </TableRow>\n        {expanded && (\n          <React.Fragment>\n            <MemorySummary\n              initialExpanded={false}\n              memoryTableSummary={summary}\n            />\n            {entries.map((memoryTableEntry, index) => {\n              const object_size =\n                memoryTableEntry.object_size === -1\n                  ? \"?\"\n                  : `${memoryTableEntry.object_size}  B`;\n              const memoryTableEntryValues = [\n                \"\", // Padding\n                memoryTableEntry.node_ip_address,\n                memoryTableEntry.pid,\n                memoryTableEntry.type,\n                memoryTableEntry.object_id,\n                object_size,\n                memoryTableEntry.reference_type,\n                memoryTableEntry.call_site,\n              ];\n              return (\n                <TableRow hover key={index}>\n                  {memoryTableEntryValues.map((value, index) => (\n                    <TableCell key={index} className={classes.cell}>\n                      {value}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              );\n            })}\n          </React.Fragment>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(MemoryRowGroup);\n","import {\n  Button,\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { stopMemoryTableCollection } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\nimport MemoryRowGroup from \"./MemoryRowGroup\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tab: state.dashboard.tab,\n  memoryTable: state.dashboard.memoryTable,\n  shouldObtainMemoryTable: state.dashboard.shouldObtainMemoryTable,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\ntype State = {\n  // If memory table is captured, it should stop renewing memory table.\n  pauseMemoryTable: boolean;\n};\n\nclass MemoryInfo extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  handlePauseMemoryTable = async () => {\n    const { shouldObtainMemoryTable } = this.props;\n    this.props.setShouldObtainMemoryTable(!shouldObtainMemoryTable);\n    if (shouldObtainMemoryTable) {\n      await stopMemoryTableCollection();\n    }\n  };\n\n  renderIcon = () => {\n    if (this.props.shouldObtainMemoryTable) {\n      return <PauseIcon />;\n    } else {\n      return <PlayArrowIcon />;\n    }\n  };\n\n  render() {\n    const { classes, memoryTable } = this.props;\n    const memoryTableHeaders = [\n      \"\", // Padding\n      \"IP Address\",\n      \"Pid\",\n      \"Type\",\n      \"Object ID\",\n      \"Object Size\",\n      \"Reference Type\",\n      \"Call Site\",\n    ];\n    return (\n      <React.Fragment>\n        {memoryTable !== null ? (\n          <React.Fragment>\n            <Button color=\"primary\" onClick={this.handlePauseMemoryTable}>\n              {this.renderIcon()}\n              {this.props.shouldObtainMemoryTable\n                ? \"Pause Collection\"\n                : \"Resume Collection\"}\n            </Button>\n            <Table className={classes.table}>\n              <TableHead>\n                <TableRow>\n                  {memoryTableHeaders.map((header, index) => (\n                    <TableCell key={index} className={classes.cell}>\n                      {header}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {Object.keys(memoryTable.group).map((group_key, index) => (\n                  <MemoryRowGroup\n                    key={index}\n                    groupKey={group_key}\n                    memoryTableGroups={memoryTable.group}\n                    initialExpanded={true}\n                  />\n                ))}\n              </TableBody>\n            </Table>\n          </React.Fragment>\n        ) : (\n          <div>No Memory Table Information Provided</div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(MemoryInfo));\n","export const getWeightedAverage = (\n  input: {\n    weight: number;\n    value: number;\n  }[],\n) => {\n  if (input.length === 0) {\n    return 0;\n  }\n\n  let totalWeightTimesValue = 0;\n  let totalWeight = 0;\n  for (const { weight, value } of input) {\n    totalWeightTimesValue += weight * value;\n    totalWeight += weight;\n  }\n  return totalWeightTimesValue / totalWeight;\n};\n\nexport const sum = (vals: number[]) => vals.reduce((acc, val) => acc + val, 0);\n","import {\n  createStyles,\n  Dialog,\n  IconButton,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      padding: theme.spacing(3),\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1.5),\n      top: theme.spacing(1.5),\n      zIndex: 1,\n    },\n    title: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n      fontSize: \"1.5rem\",\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n    },\n  });\n\ntype Props = {\n  handleClose: () => void;\n  title: string;\n};\n\nclass DialogWithTitle extends React.Component<\n  Props & WithStyles<typeof styles>\n> {\n  render() {\n    const { classes, handleClose, title } = this.props;\n    return (\n      <Dialog\n        classes={{ paper: classes.paper }}\n        fullWidth\n        maxWidth=\"md\"\n        onClose={handleClose}\n        open\n        scroll=\"body\"\n      >\n        <IconButton className={classes.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n        <Typography className={classes.title}>{title}</Typography>\n        {this.props.children}\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(DialogWithTitle);\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      overflowX: \"auto\",\n    },\n    cell: {\n      borderWidth: 0,\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      padding: 0,\n      \"&:last-child\": {\n        paddingRight: 0,\n      },\n    },\n    lineNumber: {\n      color: theme.palette.text.secondary,\n      paddingRight: theme.spacing(2),\n      textAlign: \"right\",\n      verticalAlign: \"top\",\n      width: \"1%\",\n      // Use a ::before pseudo-element for the line number so that it won't\n      // interact with user selections or searching.\n      \"&::before\": {\n        content: \"attr(data-line-number)\",\n      },\n    },\n    line: {\n      textAlign: \"left\",\n      whiteSpace: \"pre-wrap\",\n    },\n  });\n\ntype Props = {\n  lines: string[];\n};\n\nclass NumberedLines extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, lines } = this.props;\n    return (\n      <Table>\n        <TableBody>\n          {lines.map((line, index) => (\n            <TableRow key={index}>\n              <TableCell\n                className={classNames(classes.cell, classes.lineNumber)}\n                data-line-number={index + 1}\n              />\n              <TableCell className={classNames(classes.cell, classes.line)}>\n                {line}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n}\n\nexport default withStyles(styles)(NumberedLines);\n","import {\n  createStyles,\n  fade,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { ErrorsResponse, getErrors } from \"../../../../../api\";\nimport DialogWithTitle from \"../../../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../../../common/NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3),\n    },\n    error: {\n      backgroundColor: fade(theme.palette.error.main, 0.04),\n      borderLeftColor: theme.palette.error.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 2,\n      marginTop: theme.spacing(3),\n      padding: theme.spacing(2),\n    },\n    timestamp: {\n      color: theme.palette.text.secondary,\n      marginBottom: theme.spacing(1),\n    },\n  });\n\ntype Props = {\n  clearErrorDialog: () => void;\n  hostname: string;\n  pid: number | null;\n};\n\ntype State = {\n  result: ErrorsResponse | null;\n  error: string | null;\n};\n\nclass Errors extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    result: null,\n    error: null,\n  };\n\n  async componentDidMount() {\n    try {\n      const { hostname, pid } = this.props;\n      const result = await getErrors(hostname, pid);\n      this.setState({ result, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, clearErrorDialog, hostname } = this.props;\n    const { result, error } = this.state;\n\n    return (\n      <DialogWithTitle handleClose={clearErrorDialog} title=\"Errors\">\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, errors]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {hostname} (PID: {pid})\n              </Typography>\n              {errors.length > 0 ? (\n                errors.map(({ message, timestamp }, index) => (\n                  <div className={classes.error} key={index}>\n                    <Typography className={classes.timestamp}>\n                      Error at {new Date(timestamp * 1000).toLocaleString()}\n                    </Typography>\n                    <NumberedLines lines={message.trim().split(\"\\n\")} />\n                  </div>\n                ))\n              ) : (\n                <Typography color=\"textSecondary\">No errors found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </DialogWithTitle>\n    );\n  }\n}\n\nexport default withStyles(styles)(Errors);\n","import {\n  createStyles,\n  fade,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { getLogs, LogsResponse } from \"../../../../../api\";\nimport DialogWithTitle from \"../../../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../../../common/NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    header: {\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      marginTop: theme.spacing(3),\n    },\n    log: {\n      backgroundColor: fade(theme.palette.primary.main, 0.04),\n      borderLeftColor: theme.palette.primary.main,\n      borderLeftStyle: \"solid\",\n      borderLeftWidth: 2,\n      padding: theme.spacing(2),\n    },\n  });\n\ntype Props = {\n  clearLogDialog: () => void;\n  hostname: string;\n  pid: number | null;\n};\n\ntype State = {\n  result: LogsResponse | null;\n  error: string | null;\n};\n\nclass Logs extends React.Component<Props & WithStyles<typeof styles>, State> {\n  state: State = {\n    result: null,\n    error: null,\n  };\n\n  async componentDidMount() {\n    try {\n      const { hostname, pid } = this.props;\n      const result = await getLogs(hostname, pid);\n      this.setState({ result, error: null });\n    } catch (error) {\n      this.setState({ result: null, error: error.toString() });\n    }\n  }\n\n  render() {\n    const { classes, clearLogDialog, hostname } = this.props;\n    const { result, error } = this.state;\n\n    return (\n      <DialogWithTitle handleClose={clearLogDialog} title=\"Logs\">\n        {error !== null ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : result === null ? (\n          <Typography color=\"textSecondary\">Loading...</Typography>\n        ) : (\n          Object.entries(result).map(([pid, lines]) => (\n            <React.Fragment key={pid}>\n              <Typography className={classes.header}>\n                {hostname} (PID: {pid})\n              </Typography>\n              {lines.length > 0 ? (\n                <div className={classes.log}>\n                  <NumberedLines lines={lines} />\n                </div>\n              ) : (\n                <Typography color=\"textSecondary\">No logs found.</Typography>\n              )}\n            </React.Fragment>\n          ))\n        )}\n      </DialogWithTitle>\n    );\n  }\n}\n\nexport default withStyles(styles)(Logs);\n","import { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst blend = (\n  [r1, g1, b1]: number[],\n  [r2, g2, b2]: number[],\n  ratio: number,\n) => [\n  r1 * (1 - ratio) + r2 * ratio,\n  g1 * (1 - ratio) + g2 * ratio,\n  b1 * (1 - ratio) + b2 * ratio,\n];\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n    },\n    inner: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n    },\n  });\n\ntype Props = {\n  percent: number;\n  text: string;\n};\n\nclass UsageBar extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, text } = this.props;\n\n    let { percent } = this.props;\n    percent = Math.max(percent, 0);\n    percent = Math.min(percent, 100);\n\n    const minColor = [0, 255, 0];\n    const maxColor = [255, 0, 0];\n\n    const leftColor = minColor;\n    const rightColor = blend(minColor, maxColor, percent / 100);\n    const alpha = 0.2;\n\n    const gradient = `\n      linear-gradient(\n        to right,\n        rgba(${leftColor.join(\",\")}, ${alpha}) 0%,\n        rgba(${rightColor.join(\",\")}, ${alpha}) ${percent}%,\n        transparent ${percent}%\n      )\n    `;\n\n    // Use a nested `div` here because the right border is affected by the\n    // gradient background otherwise.\n    return (\n      <div className={classes.root}>\n        <div className={classes.inner} style={{ background: gradient }}>\n          {text}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(UsageBar);\n","import React from \"react\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport { getWeightedAverage } from \"../../../../common/util\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterCPU: ClusterFeatureComponent = ({ nodes }) => {\n  const cpuWeightedAverage = getWeightedAverage(\n    nodes.map((node) => ({ weight: node.cpus[0], value: node.cpu })),\n  );\n  return (\n    <div style={{ minWidth: 60 }}>\n      <UsageBar\n        percent={cpuWeightedAverage}\n        text={`${cpuWeightedAverage.toFixed(1)}%`}\n      />\n    </div>\n  );\n};\n\nexport const NodeCPU: NodeFeatureComponent = ({ node }) => (\n  <div style={{ minWidth: 60 }}>\n    <UsageBar percent={node.cpu} text={`${node.cpu.toFixed(1)}%`} />\n  </div>\n);\n\nexport const WorkerCPU: WorkerFeatureComponent = ({ worker }) => (\n  <div style={{ minWidth: 60 }}>\n    <UsageBar\n      percent={worker.cpu_percent}\n      text={`${worker.cpu_percent.toFixed(1)}%`}\n    />\n  </div>\n);\n","export const formatByteAmount = (\n  amount: number,\n  unit: \"mebibyte\" | \"gibibyte\",\n) =>\n  `${(\n    amount / (unit === \"mebibyte\" ? Math.pow(1024, 2) : Math.pow(1024, 3))\n  ).toFixed(1)} ${unit === \"mebibyte\" ? \"MiB\" : \"GiB\"}`;\n\nexport const formatUsage = (\n  used: number,\n  total: number,\n  unit: \"mebibyte\" | \"gibibyte\",\n) => {\n  const usedFormatted = formatByteAmount(used, unit);\n  const totalFormatted = formatByteAmount(total, unit);\n  const percent = (100 * used) / total;\n  return `${usedFormatted} / ${totalFormatted} (${percent.toFixed(0)}%)`;\n};\n\n// Formats, e.g. 400 and 6000 as \"400 MiB / 6000 MiB (6.7%)\"\nexport const MiBRatio = (used: number, total: number) =>\n  `${used} MiB / ${total} MiB (${(100 * (used / total)).toFixed(1)}%)`;\n\nexport const formatDuration = (durationInSeconds: number) => {\n  const durationSeconds = Math.floor(durationInSeconds) % 60;\n  const durationMinutes = Math.floor(durationInSeconds / 60) % 60;\n  const durationHours = Math.floor(durationInSeconds / 60 / 60) % 24;\n  const durationDays = Math.floor(durationInSeconds / 60 / 60 / 24);\n  const pad = (value: number) => value.toString().padStart(2, \"0\");\n  return [\n    durationDays ? `${durationDays}d` : \"\",\n    `${pad(durationHours)}h`,\n    `${pad(durationMinutes)}m`,\n    `${pad(durationSeconds)}s`,\n  ].join(\" \");\n};\n\nexport const formatValue = (rawFloat: number) => {\n  try {\n    const decimals = rawFloat.toString().split(\".\")[1].length || 0;\n    if (decimals <= 3) {\n      return rawFloat.toString();\n    } // Few decimals\n    if (Math.abs(rawFloat.valueOf()) >= 1.0) {\n      return rawFloat.toPrecision(5);\n    } // Values >= 1\n    return rawFloat.toExponential(); // Values in (-1; 1)\n  } catch (e) {\n    return rawFloat.toString();\n  }\n};\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatUsage } from \"../../../../common/formatUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterDisk: ClusterFeatureComponent = ({ nodes }) => {\n  let used = 0;\n  let total = 0;\n  for (const node of nodes) {\n    used += node.disk[\"/\"].used;\n    total += node.disk[\"/\"].total;\n  }\n  return (\n    <UsageBar\n      percent={(100 * used) / total}\n      text={formatUsage(used, total, \"gibibyte\")}\n    />\n  );\n};\n\nexport const NodeDisk: NodeFeatureComponent = ({ node }) => (\n  <UsageBar\n    percent={(100 * node.disk[\"/\"].used) / node.disk[\"/\"].total}\n    text={formatUsage(node.disk[\"/\"].used, node.disk[\"/\"].total, \"gibibyte\")}\n  />\n);\n\nexport const WorkerDisk: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import { createStyles, Theme, withStyles, WithStyles } from \"@material-ui/core\";\nimport React, { HTMLAttributes } from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    button: {\n      color: theme.palette.primary.main,\n      \"&:hover\": {\n        cursor: \"pointer\",\n        textDecoration: \"underline\",\n      },\n    },\n  });\n\nclass SpanButton extends React.Component<\n  HTMLAttributes<HTMLSpanElement> & WithStyles<typeof styles>\n> {\n  render() {\n    const { classes, ...otherProps } = this.props;\n    return <span className={classes.button} {...otherProps} />;\n  }\n}\n\nexport default withStyles(styles)(SpanButton);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport SpanButton from \"../../../../common/SpanButton\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const makeClusterErrors = (errorCounts: {\n  [ip: string]: {\n    perWorker: {\n      [pid: string]: number;\n    };\n    total: number;\n  };\n}): ClusterFeatureComponent => ({ nodes }) => {\n  let totalErrorCount = 0;\n  for (const node of nodes) {\n    if (node.ip in errorCounts) {\n      totalErrorCount += errorCounts[node.ip].total;\n    }\n  }\n  return totalErrorCount === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <React.Fragment>\n      {totalErrorCount.toLocaleString()}{\" \"}\n      {totalErrorCount === 1 ? \"error\" : \"errors\"}\n    </React.Fragment>\n  );\n};\n\nexport const makeNodeErrors = (\n  errorCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setErrorDialog: (hostname: string, pid: number | null) => void,\n): NodeFeatureComponent => ({ node }) =>\n  errorCounts.total === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  ) : (\n    <SpanButton onClick={() => setErrorDialog(node.hostname, null)}>\n      View all errors ({errorCounts.total.toLocaleString()})\n    </SpanButton>\n  );\n\nexport const makeWorkerErrors = (\n  errorCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setErrorDialog: (hostname: string, pid: number | null) => void,\n): WorkerFeatureComponent => ({ node, worker }) =>\n  errorCounts.perWorker[worker.pid] ? (\n    <SpanButton onClick={() => setErrorDialog(node.hostname, worker.pid)}>\n      View errors ({errorCounts.perWorker[worker.pid].toLocaleString()})\n    </SpanButton>\n  ) : (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No errors\n    </Typography>\n  );\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport { getWeightedAverage, sum } from \"../../../../common/util\";\nimport {\n  ClusterFeatureComponent,\n  Node,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nconst clusterUtilization = (nodes: Array<Node>): number => {\n  const utils = nodes\n    .map((node) => ({ weight: node.gpus.length, value: nodeUtilization(node) }))\n    .filter((util) => !isNaN(util.value));\n  if (utils.length === 0) {\n    return NaN;\n  }\n  return getWeightedAverage(utils);\n};\n\nconst nodeUtilization = (node: Node): number => {\n  if (!node.gpus || node.gpus.length === 0) {\n    return NaN;\n  }\n  const utilizationSum = sum(node.gpus.map((gpu) => gpu.utilization_gpu));\n  const avgUtilization = utilizationSum / node.gpus.length;\n  return avgUtilization;\n};\n\nexport const ClusterGPU: ClusterFeatureComponent = ({ nodes }) => {\n  const clusterAverageUtilization = clusterUtilization(nodes);\n  return (\n    <div style={{ minWidth: 60 }}>\n      {isNaN(clusterAverageUtilization) ? (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      ) : (\n        <UsageBar\n          percent={clusterAverageUtilization}\n          text={`${clusterAverageUtilization.toFixed(1)}%`}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const NodeGPU: NodeFeatureComponent = ({ node }) => {\n  const nodeUtil = nodeUtilization(node);\n  return (\n    <div style={{ minWidth: 60 }}>\n      {isNaN(nodeUtil) ? (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      ) : (\n        <UsageBar percent={nodeUtil} text={`${nodeUtil.toFixed(1)}%`} />\n      )}\n    </div>\n  );\n};\n\nexport const WorkerGPU: WorkerFeatureComponent = ({ rayletWorker }) => {\n  const workerRes = rayletWorker?.coreWorkerStats.usedResources;\n  const workerUsedGPUResources = workerRes?.[\"GPU\"] || NaN;\n  const message = isNaN(workerUsedGPUResources) ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      N/A\n    </Typography>\n  ) : (\n    <b>`${workerUsedGPUResources} GPUs in use`</b>\n  );\n  return <div style={{ minWidth: 60 }}>{message}</div>;\n};\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { GPUStats } from \"../../../../api\";\nimport { MiBRatio } from \"../../../../common/formatUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport { getWeightedAverage, sum } from \"../../../../common/util\";\nimport {\n  ClusterFeatureComponent,\n  Node,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nconst nodeGRAMUtilization = (node: Node) => {\n  const utilization = (gpu: GPUStats) => gpu.memory_used / gpu.memory_total;\n  if (node.gpus.length === 0) {\n    return NaN;\n  }\n  const utilizationSum = sum(node.gpus.map((gpu) => utilization(gpu)));\n  const avgUtilization = utilizationSum / node.gpus.length;\n  // Convert to a percent before returning\n  return avgUtilization * 100;\n};\n\nconst clusterGRAMUtilization = (nodes: Array<Node>) => {\n  const utils = nodes\n    .map((node) => ({\n      weight: node.gpus.length,\n      value: nodeGRAMUtilization(node),\n    }))\n    .filter((util) => !isNaN(util.value));\n  if (utils.length === 0) {\n    return NaN;\n  }\n  return getWeightedAverage(utils);\n};\n\nexport const ClusterGRAM: ClusterFeatureComponent = ({ nodes }) => {\n  const clusterAverageUtilization = clusterGRAMUtilization(nodes);\n  return (\n    <div style={{ minWidth: 60 }}>\n      {isNaN(clusterAverageUtilization) ? (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      ) : (\n        <UsageBar\n          percent={clusterAverageUtilization}\n          text={`${clusterAverageUtilization.toFixed(1)}%`}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const NodeGRAM: NodeFeatureComponent = ({ node }) => {\n  const gramUtil = nodeGRAMUtilization(node);\n  return (\n    <div style={{ minWidth: 60 }}>\n      {isNaN(gramUtil) ? (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      ) : (\n        <UsageBar percent={gramUtil} text={`${gramUtil.toFixed(1)}%`} />\n      )}\n    </div>\n  );\n};\n\nexport const WorkerGRAM: WorkerFeatureComponent = ({ worker, node }) => {\n  const workerProcessPerGPU = node.gpus\n    .map((gpu) => gpu.processes)\n    .map((processes) =>\n      processes.find((process) => process.pid === worker.pid),\n    );\n  const workerUtilPerGPU = workerProcessPerGPU.map(\n    (proc) => proc?.gpu_memory_usage || 0,\n  );\n  const totalNodeGRAM = sum(node.gpus.map((gpu) => gpu.memory_total));\n  const usedGRAM = sum(workerUtilPerGPU);\n  return (\n    <div style={{ minWidth: 60 }}>\n      {node.gpus.length === 0 ? (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      ) : (\n        <UsageBar\n          percent={100 * (usedGRAM / totalNodeGRAM)}\n          text={MiBRatio(usedGRAM, totalNodeGRAM)}\n        />\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterHost: ClusterFeatureComponent = ({ nodes }) => (\n  <React.Fragment>\n    Totals ({nodes.length.toLocaleString()}{\" \"}\n    {nodes.length === 1 ? \"host\" : \"hosts\"})\n  </React.Fragment>\n);\n\nexport const NodeHost: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>\n    {node.hostname} ({node.ip})\n  </React.Fragment>\n);\n\n// Ray worker process titles have one of the following forms: `ray::IDLE`,\n// `ray::function()`, `ray::Class`, or `ray::Class.method()`. We extract the\n// first portion here for display in the \"Host\" column. Note that this will\n// always be `ray` under the current setup, but it may vary in the future.\nexport const WorkerHost: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>\n    {worker.cmdline[0].split(\"::\", 2)[0]} (PID: {worker.pid})\n  </React.Fragment>\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport SpanButton from \"../../../../common/SpanButton\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const makeClusterLogs = (logCounts: {\n  [ip: string]: {\n    perWorker: {\n      [pid: string]: number;\n    };\n    total: number;\n  };\n}): ClusterFeatureComponent => ({ nodes }) => {\n  let totalLogCount = 0;\n  for (const node of nodes) {\n    if (node.ip in logCounts) {\n      totalLogCount += logCounts[node.ip].total;\n    }\n  }\n  return totalLogCount === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <React.Fragment>\n      {totalLogCount.toLocaleString()} {totalLogCount === 1 ? \"line\" : \"lines\"}\n    </React.Fragment>\n  );\n};\n\nexport const makeNodeLogs = (\n  logCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setLogDialog: (hostname: string, pid: number | null) => void,\n): NodeFeatureComponent => ({ node }) =>\n  logCounts.total === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  ) : (\n    <SpanButton onClick={() => setLogDialog(node.hostname, null)}>\n      View all logs ({logCounts.total.toLocaleString()}{\" \"}\n      {logCounts.total === 1 ? \"line\" : \"lines\"})\n    </SpanButton>\n  );\n\nexport const makeWorkerLogs = (\n  logCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  },\n  setLogDialog: (hostname: string, pid: number | null) => void,\n): WorkerFeatureComponent => ({ node, worker }) =>\n  logCounts.perWorker[worker.pid] ? (\n    <SpanButton onClick={() => setLogDialog(node.hostname, worker.pid)}>\n      View log ({logCounts.perWorker[worker.pid].toLocaleString()}{\" \"}\n      {logCounts.perWorker[worker.pid] === 1 ? \"line\" : \"lines\"})\n    </SpanButton>\n  ) : (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      No logs\n    </Typography>\n  );\n","import React from \"react\";\nimport { formatByteAmount, formatUsage } from \"../../../../common/formatUtils\";\nimport UsageBar from \"../../../../common/UsageBar\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterRAM: ClusterFeatureComponent = ({ nodes }) => {\n  let used = 0;\n  let total = 0;\n  for (const node of nodes) {\n    used += node.mem[0] - node.mem[1];\n    total += node.mem[0];\n  }\n  return (\n    <UsageBar\n      percent={(100 * used) / total}\n      text={formatUsage(used, total, \"gibibyte\")}\n    />\n  );\n};\n\nexport const NodeRAM: NodeFeatureComponent = ({ node }) => (\n  <UsageBar\n    percent={(100 * (node.mem[0] - node.mem[1])) / node.mem[0]}\n    text={formatUsage(node.mem[0] - node.mem[1], node.mem[0], \"gibibyte\")}\n  />\n);\n\nexport const WorkerRAM: WorkerFeatureComponent = ({ node, worker }) => (\n  <UsageBar\n    percent={(100 * worker.memory_info.rss) / node.mem[0]}\n    text={formatByteAmount(worker.memory_info.rss, \"mebibyte\")}\n  />\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatByteAmount } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterReceived: ClusterFeatureComponent = ({ nodes }) => {\n  let totalReceived = 0;\n  for (const node of nodes) {\n    totalReceived += node.net[1];\n  }\n  return (\n    <React.Fragment>\n      {formatByteAmount(totalReceived, \"mebibyte\")}/s\n    </React.Fragment>\n  );\n};\n\nexport const NodeReceived: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatByteAmount(node.net[1], \"mebibyte\")}/s</React.Fragment>\n);\n\nexport const WorkerReceived: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatByteAmount } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterSent: ClusterFeatureComponent = ({ nodes }) => {\n  let totalSent = 0;\n  for (const node of nodes) {\n    totalSent += node.net[0];\n  }\n  return (\n    <React.Fragment>{formatByteAmount(totalSent, \"mebibyte\")}/s</React.Fragment>\n  );\n};\n\nexport const NodeSent: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatByteAmount(node.net[0], \"mebibyte\")}/s</React.Fragment>\n);\n\nexport const WorkerSent: WorkerFeatureComponent = () => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { formatDuration } from \"../../../../common/formatUtils\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nconst getUptime = (bootTime: number) => Date.now() / 1000 - bootTime;\n\nexport const ClusterUptime: ClusterFeatureComponent = ({ nodes }) => (\n  <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n    N/A\n  </Typography>\n);\n\nexport const NodeUptime: NodeFeatureComponent = ({ node }) => (\n  <React.Fragment>{formatDuration(getUptime(node.boot_time))}</React.Fragment>\n);\n\nexport const WorkerUptime: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>\n    {formatDuration(getUptime(worker.create_time))}\n  </React.Fragment>\n);\n","import React from \"react\";\nimport {\n  ClusterFeatureComponent,\n  NodeFeatureComponent,\n  WorkerFeatureComponent,\n} from \"./types\";\n\nexport const ClusterWorkers = (\n  totalWorkers: number,\n): ClusterFeatureComponent => ({ nodes }) => {\n  let totalCpus = 0;\n  for (const node of nodes) {\n    totalCpus += node.cpus[0];\n  }\n  return (\n    <React.Fragment>\n      {totalWorkers.toLocaleString()}{\" \"}\n      {totalWorkers === 1 ? \"worker\" : \"workers\"} / {totalCpus.toLocaleString()}{\" \"}\n      {totalCpus === 1 ? \"core\" : \"cores\"}\n    </React.Fragment>\n  );\n};\n\nexport const NodeWorkers = (totalWorkers: number): NodeFeatureComponent => ({\n  node,\n}) => {\n  const cpus = node.cpus[0];\n  return (\n    <React.Fragment>\n      {totalWorkers.toLocaleString()}{\" \"}\n      {totalWorkers === 1 ? \"worker\" : \"workers\"} / {cpus.toLocaleString()}{\" \"}\n      {cpus === 1 ? \"core\" : \"cores\"}\n    </React.Fragment>\n  );\n};\n\n// Ray worker process titles have one of the following forms: `ray::IDLE`,\n// `ray::function()`, `ray::Class`, or `ray::Class.method()`. We extract the\n// second portion here for display in the \"Workers\" column.\nexport const WorkerWorkers: WorkerFeatureComponent = ({ worker }) => (\n  <React.Fragment>{worker.cmdline[0].split(\"::\", 2)[1]}</React.Fragment>\n);\n","import {\n  createStyles,\n  TableCell,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport {\n  NodeInfoResponse,\n  NodeInfoResponseWorker,\n  RayletInfoResponse,\n} from \"../../../api\";\nimport { NodeCPU, WorkerCPU } from \"./features/CPU\";\nimport { NodeDisk, WorkerDisk } from \"./features/Disk\";\nimport { makeNodeErrors, makeWorkerErrors } from \"./features/Errors\";\nimport { NodeGPU, WorkerGPU } from \"./features/GPU\";\nimport { NodeGRAM, WorkerGRAM } from \"./features/GRAM\";\nimport { NodeHost, WorkerHost } from \"./features/Host\";\nimport { makeNodeLogs, makeWorkerLogs } from \"./features/Logs\";\nimport { NodeRAM, WorkerRAM } from \"./features/RAM\";\nimport { NodeReceived, WorkerReceived } from \"./features/Received\";\nimport { NodeSent, WorkerSent } from \"./features/Sent\";\nimport { NodeUptime, WorkerUptime } from \"./features/Uptime\";\nimport { NodeWorkers, WorkerWorkers } from \"./features/Workers\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    expandCollapseCell: {\n      cursor: \"pointer\",\n    },\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n    extraInfo: {\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      whiteSpace: \"pre\",\n    },\n  });\n\ntype ArrayType<T> = T extends Array<infer U> ? U : never;\ntype Node = ArrayType<NodeInfoResponse[\"clients\"]>;\n\ntype Props = {\n  node: Node;\n  clusterWorkers: Array<NodeInfoResponseWorker>;\n  raylet: RayletInfoResponse[\"nodes\"][keyof RayletInfoResponse[\"nodes\"]] | null;\n  logCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  };\n  errorCounts: {\n    perWorker: { [pid: string]: number };\n    total: number;\n  };\n  setLogDialog: (hostname: string, pid: number | null) => void;\n  setErrorDialog: (hostname: string, pid: number | null) => void;\n  initialExpanded: boolean;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nclass NodeRowGroup extends React.Component<\n  Props & WithStyles<typeof styles>,\n  State\n> {\n  state: State = {\n    expanded: this.props.initialExpanded,\n  };\n\n  toggleExpand = () => {\n    this.setState((state) => ({\n      expanded: !state.expanded,\n    }));\n  };\n\n  render() {\n    const {\n      classes,\n      node,\n      raylet,\n      clusterWorkers,\n      logCounts,\n      errorCounts,\n      setLogDialog,\n      setErrorDialog,\n    } = this.props;\n    const { expanded } = this.state;\n    const features = [\n      { NodeFeature: NodeHost, WorkerFeature: WorkerHost },\n      {\n        NodeFeature: NodeWorkers(clusterWorkers.length),\n        WorkerFeature: WorkerWorkers,\n      },\n      { NodeFeature: NodeUptime, WorkerFeature: WorkerUptime },\n      { NodeFeature: NodeCPU, WorkerFeature: WorkerCPU },\n      { NodeFeature: NodeRAM, WorkerFeature: WorkerRAM },\n      { NodeFeature: NodeGPU, WorkerFeature: WorkerGPU },\n      { NodeFeature: NodeGRAM, WorkerFeature: WorkerGRAM },\n      { NodeFeature: NodeDisk, WorkerFeature: WorkerDisk },\n      { NodeFeature: NodeSent, WorkerFeature: WorkerSent },\n      { NodeFeature: NodeReceived, WorkerFeature: WorkerReceived },\n      {\n        NodeFeature: makeNodeLogs(logCounts, setLogDialog),\n        WorkerFeature: makeWorkerLogs(logCounts, setLogDialog),\n      },\n      {\n        NodeFeature: makeNodeErrors(errorCounts, setErrorDialog),\n        WorkerFeature: makeWorkerErrors(errorCounts, setErrorDialog),\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <TableRow hover>\n          <TableCell\n            className={classNames(classes.cell, classes.expandCollapseCell)}\n            onClick={this.toggleExpand}\n          >\n            {!expanded ? (\n              <AddIcon className={classes.expandCollapseIcon} />\n            ) : (\n              <RemoveIcon className={classes.expandCollapseIcon} />\n            )}\n          </TableCell>\n          {features.map(({ NodeFeature }, index) => (\n            <TableCell className={classes.cell} key={index}>\n              <NodeFeature node={node} />\n            </TableCell>\n          ))}\n        </TableRow>\n        {expanded && (\n          <React.Fragment>\n            {raylet !== null && raylet.extraInfo !== undefined && (\n              <TableRow hover>\n                <TableCell className={classes.cell} />\n                <TableCell\n                  className={classNames(classes.cell, classes.extraInfo)}\n                  colSpan={features.length}\n                >\n                  {raylet.extraInfo}\n                </TableCell>\n              </TableRow>\n            )}\n            {clusterWorkers.map((worker, index: number) => {\n              const rayletWorker =\n                raylet?.workersStats.find(\n                  (rayletWorker) => worker.pid === rayletWorker.pid,\n                ) || null;\n\n              return (\n                <TableRow hover key={index}>\n                  <TableCell className={classes.cell} />\n                  {features.map(({ WorkerFeature }, index) => (\n                    <TableCell className={classes.cell} key={index}>\n                      <WorkerFeature\n                        node={node}\n                        worker={worker}\n                        rayletWorker={rayletWorker}\n                      />\n                    </TableCell>\n                  ))}\n                </TableRow>\n              );\n            })}\n          </React.Fragment>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(NodeRowGroup);\n","import {\n  createStyles,\n  TableCell,\n  TableRow,\n  Theme,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport React from \"react\";\nimport { NodeInfoResponse } from \"../../../api\";\nimport { ClusterCPU } from \"./features/CPU\";\nimport { ClusterDisk } from \"./features/Disk\";\nimport { makeClusterErrors } from \"./features/Errors\";\nimport { ClusterGPU } from \"./features/GPU\";\nimport { ClusterGRAM } from \"./features/GRAM\";\nimport { ClusterHost } from \"./features/Host\";\nimport { makeClusterLogs } from \"./features/Logs\";\nimport { ClusterRAM } from \"./features/RAM\";\nimport { ClusterReceived } from \"./features/Received\";\nimport { ClusterSent } from \"./features/Sent\";\nimport { ClusterUptime } from \"./features/Uptime\";\nimport { ClusterWorkers } from \"./features/Workers\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    cell: {\n      borderTopColor: theme.palette.divider,\n      borderTopStyle: \"solid\",\n      borderTopWidth: 2,\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    totalIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n  });\n\ntype Props = {\n  nodes: NodeInfoResponse[\"clients\"];\n  clusterTotalWorkers: number;\n  logCounts: {\n    [ip: string]: {\n      perWorker: { [pid: string]: number };\n      total: number;\n    };\n  };\n  errorCounts: {\n    [ip: string]: {\n      perWorker: { [pid: string]: number };\n      total: number;\n    };\n  };\n};\n\nclass TotalRow extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const {\n      classes,\n      nodes,\n      clusterTotalWorkers,\n      logCounts,\n      errorCounts,\n    } = this.props;\n\n    const features = [\n      { ClusterFeature: ClusterHost },\n      { ClusterFeature: ClusterWorkers(clusterTotalWorkers) },\n      { ClusterFeature: ClusterUptime },\n      { ClusterFeature: ClusterCPU },\n      { ClusterFeature: ClusterRAM },\n      { ClusterFeature: ClusterGPU },\n      { ClusterFeature: ClusterGRAM },\n      { ClusterFeature: ClusterDisk },\n      { ClusterFeature: ClusterSent },\n      { ClusterFeature: ClusterReceived },\n      { ClusterFeature: makeClusterLogs(logCounts) },\n      { ClusterFeature: makeClusterErrors(errorCounts) },\n    ];\n\n    return (\n      <TableRow hover>\n        <TableCell className={classes.cell}>\n          <LayersIcon className={classes.totalIcon} />\n        </TableCell>\n        {features.map(({ ClusterFeature }, index) => (\n          <TableCell className={classes.cell} key={index}>\n            <ClusterFeature nodes={nodes} />\n          </TableCell>\n        ))}\n      </TableRow>\n    );\n  }\n}\n\nexport default withStyles(styles)(TotalRow);\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { RayletInfoResponse } from \"../../../api\";\nimport { sum } from \"../../../common/util\";\nimport { StoreState } from \"../../../store\";\nimport Errors from \"./dialogs/errors/Errors\";\nimport Logs from \"./dialogs/logs/Logs\";\nimport NodeRowGroup from \"./NodeRowGroup\";\nimport TotalRow from \"./TotalRow\";\n\nconst clusterWorkerPids = (\n  rayletInfo: RayletInfoResponse,\n): Map<string, Set<string>> => {\n  // Groups PIDs registered with the raylet by node IP address\n  // This is used to filter out processes belonging to other ray clusters.\n  const nodeMap = new Map();\n  const workerPids = new Set();\n  for (const [nodeIp, { workersStats }] of Object.entries(rayletInfo.nodes)) {\n    for (const worker of workersStats) {\n      if (!worker.isDriver) {\n        workerPids.add(worker.pid.toString());\n      }\n    }\n    nodeMap.set(nodeIp, workerPids);\n  }\n  return nodeMap;\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  nodeInfo: state.dashboard.nodeInfo,\n  rayletInfo: state.dashboard.rayletInfo,\n});\n\ntype State = {\n  logDialog: { hostname: string; pid: number | null } | null;\n  errorDialog: { hostname: string; pid: number | null } | null;\n};\n\nclass NodeInfo extends React.Component<\n  WithStyles<typeof styles> & ReturnType<typeof mapStateToProps>\n> {\n  state: State = {\n    logDialog: null,\n    errorDialog: null,\n  };\n\n  setLogDialog = (hostname: string, pid: number | null) => {\n    this.setState({ logDialog: { hostname, pid } });\n  };\n\n  clearLogDialog = () => {\n    this.setState({ logDialog: null });\n  };\n\n  setErrorDialog = (hostname: string, pid: number | null) => {\n    this.setState({ errorDialog: { hostname, pid } });\n  };\n\n  clearErrorDialog = () => {\n    this.setState({ errorDialog: null });\n  };\n\n  render() {\n    const { classes, nodeInfo, rayletInfo } = this.props;\n    const { logDialog, errorDialog } = this.state;\n\n    if (nodeInfo === null || rayletInfo === null) {\n      return <Typography color=\"textSecondary\">Loading...</Typography>;\n    }\n\n    const logCounts: {\n      [ip: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    const errorCounts: {\n      [ip: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    // We fetch data about which process IDs are registered with\n    // the cluster's raylet for each node. We use this to filter\n    // the worker data contained in the node info data because\n    // the node info can contain data from more than one cluster\n    // if more than one cluster is running on a machine.\n    const clusterWorkerPidsByIp = clusterWorkerPids(rayletInfo);\n    const clusterTotalWorkers = sum(\n      Array.from(clusterWorkerPidsByIp.values()).map(\n        (workerSet) => workerSet.size,\n      ),\n    );\n    // Initialize inner structure of the count objects\n    for (const client of nodeInfo.clients) {\n      const clusterWorkerPids = clusterWorkerPidsByIp.get(client.ip);\n      if (!clusterWorkerPids) {\n        continue;\n      }\n      const filteredLogEntries = Object.entries(\n        nodeInfo.log_counts[client.ip] || {},\n      ).filter(([pid, _]) => clusterWorkerPids.has(pid));\n      const totalLogEntries = sum(\n        filteredLogEntries.map(([_, count]) => count),\n      );\n      logCounts[client.ip] = {\n        perWorker: Object.fromEntries(filteredLogEntries),\n        total: totalLogEntries,\n      };\n\n      const filteredErrEntries = Object.entries(\n        nodeInfo.error_counts[client.ip] || {},\n      ).filter(([pid, _]) => clusterWorkerPids.has(pid));\n      const totalErrEntries = sum(\n        filteredErrEntries.map(([_, count]) => count),\n      );\n      errorCounts[client.ip] = {\n        perWorker: Object.fromEntries(filteredErrEntries),\n        total: totalErrEntries,\n      };\n    }\n\n    return (\n      <React.Fragment>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell} />\n              <TableCell className={classes.cell}>Host</TableCell>\n              <TableCell className={classes.cell}>Workers</TableCell>\n              <TableCell className={classes.cell}>Uptime</TableCell>\n              <TableCell className={classes.cell}>CPU</TableCell>\n              <TableCell className={classes.cell}>RAM</TableCell>\n              <TableCell className={classes.cell}>GPU</TableCell>\n              <TableCell className={classes.cell}>GRAM</TableCell>\n              <TableCell className={classes.cell}>Disk</TableCell>\n              <TableCell className={classes.cell}>Sent</TableCell>\n              <TableCell className={classes.cell}>Received</TableCell>\n              <TableCell className={classes.cell}>Logs</TableCell>\n              <TableCell className={classes.cell}>Errors</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {nodeInfo.clients.map((client) => {\n              const clusterWorkerPids =\n                clusterWorkerPidsByIp.get(client.ip) || new Set();\n              return (\n                <NodeRowGroup\n                  key={client.ip}\n                  clusterWorkers={client.workers\n                    .filter((worker) =>\n                      clusterWorkerPids.has(worker.pid.toString()),\n                    )\n                    .sort((w1, w2) => {\n                      if (w2.cmdline[0] === \"ray::IDLE\") {\n                        return -1;\n                      }\n                      if (w1.cmdline[0] === \"ray::IDLE\") {\n                        return 1;\n                      }\n                      return w1.pid < w2.pid ? -1 : 1;\n                    })}\n                  node={client}\n                  raylet={\n                    client.ip in rayletInfo.nodes\n                      ? rayletInfo.nodes[client.ip]\n                      : null\n                  }\n                  logCounts={logCounts[client.ip]}\n                  errorCounts={errorCounts[client.ip]}\n                  setLogDialog={this.setLogDialog}\n                  setErrorDialog={this.setErrorDialog}\n                  initialExpanded={nodeInfo.clients.length <= 1}\n                />\n              );\n            })}\n            <TotalRow\n              clusterTotalWorkers={clusterTotalWorkers}\n              nodes={nodeInfo.clients}\n              logCounts={logCounts}\n              errorCounts={errorCounts}\n            />\n          </TableBody>\n        </Table>\n        {logDialog !== null && (\n          <Logs\n            clearLogDialog={this.clearLogDialog}\n            hostname={logDialog.hostname}\n            pid={logDialog.pid}\n          />\n        )}\n        {errorDialog !== null && (\n          <Errors\n            clearErrorDialog={this.clearErrorDialog}\n            hostname={errorDialog.hostname}\n            pid={errorDialog.pid}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(NodeInfo));\n","import {\n  createStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getRayConfig } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n      width: \"auto\",\n    },\n    cell: {\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(3),\n      },\n    },\n    key: {\n      color: theme.palette.text.secondary,\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  rayConfig: state.dashboard.rayConfig,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\nclass RayConfig extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps\n> {\n  refreshRayConfig = async () => {\n    try {\n      const rayConfig = await getRayConfig();\n      this.props.setRayConfig(rayConfig);\n    } catch (error) {\n    } finally {\n      setTimeout(this.refreshRayConfig, 10 * 1000);\n    }\n  };\n\n  async componentDidMount() {\n    await this.refreshRayConfig();\n  }\n\n  render() {\n    const { classes, rayConfig } = this.props;\n\n    if (rayConfig === null) {\n      return (\n        <Typography color=\"textSecondary\">\n          No Ray configuration detected.\n        </Typography>\n      );\n    }\n\n    const formattedRayConfig = [\n      {\n        key: \"Autoscaling mode\",\n        value: rayConfig.autoscaling_mode,\n      },\n      {\n        key: \"Head node type\",\n        value: rayConfig.head_type,\n      },\n      {\n        key: \"Worker node type\",\n        value: rayConfig.worker_type,\n      },\n      {\n        key: \"Min worker nodes\",\n        value: rayConfig.min_workers,\n      },\n      {\n        key: \"Initial worker nodes\",\n        value: rayConfig.initial_workers,\n      },\n      {\n        key: \"Max worker nodes\",\n        value: rayConfig.max_workers,\n      },\n      {\n        key: \"Idle timeout\",\n        value: `${rayConfig.idle_timeout_minutes} ${\n          rayConfig.idle_timeout_minutes === 1 ? \"minute\" : \"minutes\"\n        }`,\n      },\n    ];\n\n    return (\n      <div>\n        <Typography>Ray cluster configuration:</Typography>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell}>Setting</TableCell>\n              <TableCell className={classes.cell}>Value</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {formattedRayConfig.map(({ key, value }, index) => (\n              <TableRow key={index}>\n                <TableCell className={classNames(classes.cell, classes.key)}>\n                  {key}\n                </TableCell>\n                <TableCell className={classes.cell}>{value}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(RayConfig));\n","import {\n  createStyles,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport DialogWithTitle from \"../../../common/DialogWithTitle\";\nimport NumberedLines from \"../../../common/NumberedLines\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    table: {\n      marginTop: theme.spacing(1),\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\ntype State = {\n  currentError: string;\n  open: boolean;\n};\n\nclass TuneErrors extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  state: State = {\n    currentError: \"\",\n    open: false,\n  };\n\n  handleOpen = (key: string) => {\n    this.setState({\n      open: true,\n      currentError: key,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  render() {\n    const { classes, tuneInfo } = this.props;\n    const { currentError, open } = this.state;\n\n    if (tuneInfo === null || Object.keys(tuneInfo.errors).length === 0) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell}> Job ID</TableCell>\n              <TableCell className={classes.cell}> Trial ID </TableCell>\n              <TableCell className={classes.cell}> Trial Directory </TableCell>\n              <TableCell className={classes.cell}> Error </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tuneInfo.errors !== null &&\n              Object.keys(tuneInfo.errors).map((key, index) => (\n                <TableRow key={index}>\n                  <TableCell className={classes.cell}>\n                    {tuneInfo.errors[key].job_id}\n                  </TableCell>\n                  <TableCell className={classes.cell}>\n                    {tuneInfo.errors[key].trial_id}\n                  </TableCell>\n                  <TableCell className={classes.cell}>{key}</TableCell>\n                  <TableCell className={classes.cell}>\n                    <Link\n                      component=\"button\"\n                      variant=\"body2\"\n                      onClick={() => {\n                        this.handleOpen(key);\n                      }}\n                    >\n                      Show Error\n                    </Link>\n                  </TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n        {open && (\n          <DialogWithTitle handleClose={this.handleClose} title=\"Error Log\">\n            {open && (\n              <NumberedLines\n                lines={tuneInfo.errors[currentError].text.trim().split(\"\\n\")}\n              />\n            )}\n          </DialogWithTitle>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneErrors));\n","import {\n  Checkbox,\n  createStyles,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Theme,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { TuneTrial } from \"../../../api\";\nimport DialogWithTitle from \"../../../common/DialogWithTitle\";\nimport { formatValue } from \"../../../common/formatUtils\";\nimport NumberedLines from \"../../../common/NumberedLines\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(2),\n      },\n    },\n    table: {\n      marginTop: theme.spacing(1),\n      height: \"700px\",\n      overflowY: \"auto\",\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"right\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1),\n      },\n    },\n    checkboxRoot: {\n      height: \"500px\",\n      overflowY: \"auto\",\n      overflowX: \"auto\",\n    },\n    paramChecklist: {\n      marginBottom: theme.spacing(2),\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\ntype State = {\n  metricParamColumn: string;\n  ascending: boolean;\n  sortedColumn: keyof TuneTrial | undefined;\n  metricColumns: string[];\n  paramColumns: string[];\n  errorTrial: string;\n  open: boolean;\n};\n\nconst mapDispatchToProps = dashboardActions;\n\nclass TuneTable extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  timeout: number = 0;\n\n  state: State = {\n    sortedColumn: undefined,\n    ascending: true,\n    metricParamColumn: \"\",\n    metricColumns: [],\n    paramColumns: [],\n    errorTrial: \"\",\n    open: false,\n  };\n\n  onColumnClick = (column: keyof TuneTrial, metricParamColumn?: string) => {\n    let ascending = this.state.ascending;\n    if (column === this.state.sortedColumn) {\n      ascending = !ascending;\n    } else {\n      ascending = true;\n    }\n    this.setState({\n      sortedColumn: column,\n      ascending: ascending,\n    });\n\n    if (metricParamColumn) {\n      this.setState({\n        metricParamColumn: metricParamColumn,\n      });\n    }\n  };\n\n  /**\n   * Replaces all underscores with spaces and capitalizes all words\n   * in str\n   */\n  humanize = (str: string) =>\n    str\n      .split(\"_\")\n      .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n      .join(\" \");\n\n  handleOpen = (key: string | number) => {\n    if (typeof key === \"number\") {\n      key = key.toString();\n    }\n    this.setState({\n      open: true,\n      errorTrial: key,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  sortedCell = (\n    name: keyof TuneTrial,\n    chosenMetricParam?: string,\n    index?: number,\n  ) => {\n    const { tuneInfo, classes } = this.props;\n    const { sortedColumn, ascending, metricParamColumn } = this.state;\n    let label: \"desc\" | \"asc\" = \"asc\";\n\n    if (name === sortedColumn && !ascending) {\n      label = \"desc\";\n    }\n\n    if (tuneInfo === null) {\n      return;\n    }\n\n    let onClick = () => this.onColumnClick(name);\n    if (chosenMetricParam) {\n      onClick = () => this.onColumnClick(name, chosenMetricParam);\n    }\n\n    if (!index) {\n      index = 0;\n    }\n\n    let active = false;\n    let key: string = name + index.toString();\n    if (chosenMetricParam) {\n      key = chosenMetricParam + index.toString();\n      active = chosenMetricParam === metricParamColumn && sortedColumn === name;\n    } else {\n      active = name === sortedColumn;\n    }\n\n    return (\n      <TableCell className={classes.cell} key={key} onClick={onClick}>\n        <TableSortLabel active={active} direction={label} />\n        {chosenMetricParam\n          ? this.humanize(chosenMetricParam)\n          : this.humanize(name)}\n      </TableCell>\n    );\n  };\n\n  sortedTrialRecords = () => {\n    const { tuneInfo } = this.props;\n    const { sortedColumn, ascending, metricParamColumn } = this.state;\n\n    if (tuneInfo === null || Object.keys(tuneInfo.trial_records).length === 0) {\n      return null;\n    }\n\n    const trialDetails = Object.values(tuneInfo.trial_records);\n\n    if (!sortedColumn) {\n      return trialDetails;\n    }\n\n    let getAttribute = (trial: TuneTrial) => trial[sortedColumn!];\n    if (sortedColumn === \"metrics\" || sortedColumn === \"params\") {\n      getAttribute = (trial: TuneTrial) =>\n        trial[sortedColumn!][metricParamColumn];\n    }\n\n    if (sortedColumn) {\n      if (ascending) {\n        trialDetails.sort((a, b) =>\n          getAttribute(a) > getAttribute(b) ? 1 : -1,\n        );\n      } else if (!ascending) {\n        trialDetails.sort((a, b) =>\n          getAttribute(a) < getAttribute(b) ? 1 : -1,\n        );\n      }\n    }\n\n    return trialDetails;\n  };\n\n  handleMetricChoiceChange = (name: string) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    let { metricColumns } = this.state;\n    if (event.target.checked) {\n      metricColumns.push(name);\n      this.setState({\n        metricColumns: metricColumns,\n      });\n    } else {\n      metricColumns = metricColumns.filter((value) => value !== name);\n      this.setState({\n        metricColumns: metricColumns,\n      });\n    }\n  };\n\n  metricChoices = (metricNames: string[]) => {\n    const { metricColumns } = this.state;\n\n    return (\n      <FormControl>\n        <FormLabel component=\"legend\">Select Metrics </FormLabel>\n        <FormGroup>\n          {metricNames.map((value) => (\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={metricColumns.includes(value)}\n                  onChange={this.handleMetricChoiceChange(value)}\n                  value={value}\n                  color=\"primary\"\n                />\n              }\n              label={value}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n    );\n  };\n\n  handleParamChoiceChange = (name: string) => (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    let { paramColumns } = this.state;\n    if (event.target.checked) {\n      paramColumns.push(name);\n      this.setState({\n        paramColumns: paramColumns,\n      });\n    } else {\n      paramColumns = paramColumns.filter((value) => value !== name);\n      this.setState({\n        paramColumns: paramColumns,\n      });\n    }\n  };\n\n  paramChoices = (paramNames: string[]) => {\n    const { classes } = this.props;\n    const { paramColumns } = this.state;\n    return (\n      <FormControl className={classes.paramChecklist}>\n        <FormLabel component=\"legend\">Select Parameters </FormLabel>\n        <FormGroup>\n          {paramNames.map((value) => (\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={paramColumns.includes(value)}\n                  onChange={this.handleParamChoiceChange(value)}\n                  value={value}\n                  color=\"primary\"\n                />\n              }\n              label={value}\n            />\n          ))}\n        </FormGroup>\n      </FormControl>\n    );\n  };\n\n  render() {\n    const { classes, tuneInfo } = this.props;\n\n    const { metricColumns, paramColumns, open, errorTrial } = this.state;\n\n    if (\n      tuneInfo === null ||\n      Object.keys(tuneInfo[\"trial_records\"]).length === 0\n    ) {\n      return null;\n    }\n\n    const firstTrial = Object.keys(tuneInfo.trial_records)[0];\n    const paramsDict = tuneInfo.trial_records[firstTrial].params;\n    const paramNames = Object.keys(paramsDict).filter((k) => k !== \"args\");\n\n    let viewableParams = paramNames;\n    const paramOptions = paramNames.length > 3;\n    if (paramOptions) {\n      if (paramColumns.length === 0) {\n        this.setState({\n          paramColumns: paramNames.slice(0, 3),\n        });\n      }\n      viewableParams = paramColumns;\n    }\n\n    const metricNames = Object.keys(tuneInfo.trial_records[firstTrial].metrics);\n\n    let viewableMetrics = metricNames;\n    const metricOptions = metricNames.length > 3;\n    if (metricOptions) {\n      if (metricColumns.length === 0) {\n        this.setState({\n          metricColumns: metricNames.slice(0, 3),\n        });\n      }\n      viewableMetrics = metricColumns;\n    }\n\n    const trialDetails = this.sortedTrialRecords();\n\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={0}>\n          {(paramOptions || metricOptions) && (\n            <Grid item xs={2} className={classes.checkboxRoot}>\n              {paramOptions && this.paramChoices(paramNames)}\n              {metricOptions && this.metricChoices(metricNames)}\n            </Grid>\n          )}\n          <Grid\n            item\n            xs={paramOptions || metricOptions ? 10 : 12}\n            className={classes.table}\n          >\n            <Table stickyHeader>\n              <TableHead>\n                <TableRow>\n                  {this.sortedCell(\"trial_id\")}\n                  {this.sortedCell(\"job_id\")}\n                  {this.sortedCell(\"start_time\")}\n                  {viewableParams.map((value, index) =>\n                    this.sortedCell(\"params\", value, index),\n                  )}\n                  {this.sortedCell(\"status\")}\n                  {viewableMetrics.map((value, index) =>\n                    this.sortedCell(\"metrics\", value, index),\n                  )}\n                  <TableCell className={classes.cell} key=\"error\">\n                    Error\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {trialDetails !== null &&\n                  trialDetails.map((trial, index) => (\n                    <TableRow key={index}>\n                      <TableCell className={classes.cell}>\n                        {trial[\"trial_id\"]}\n                      </TableCell>\n                      <TableCell className={classes.cell}>\n                        {trial[\"job_id\"]}\n                      </TableCell>\n                      <TableCell className={classes.cell}>\n                        {trial[\"start_time\"]}\n                      </TableCell>\n                      {viewableParams.map((value, index) => (\n                        <TableCell className={classes.cell} key={index}>\n                          {typeof trial[\"params\"][value] === \"number\"\n                            ? formatValue(Number(trial[\"params\"][value]))\n                            : trial[\"params\"][value]}\n                        </TableCell>\n                      ))}\n                      <TableCell className={classes.cell}>\n                        {trial[\"status\"]}\n                      </TableCell>\n                      {trial[\"metrics\"] &&\n                        viewableMetrics.map((value, index) => (\n                          <TableCell className={classes.cell} key={index}>\n                            {typeof trial[\"metrics\"][value] === \"number\"\n                              ? formatValue(Number(trial[\"metrics\"][value]))\n                              : trial[\"metrics\"][value]}\n                          </TableCell>\n                        ))}\n                      <TableCell className={classes.cell}>\n                        {trial[\"error\"] === \"No Error\" ? (\n                          \"No Error\"\n                        ) : (\n                          <Link\n                            component=\"button\"\n                            variant=\"body2\"\n                            onClick={() => {\n                              this.handleOpen(trial[\"trial_id\"]);\n                            }}\n                          >\n                            Show Error\n                          </Link>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n          </Grid>\n        </Grid>\n        {open && (\n          <DialogWithTitle handleClose={this.handleClose} title=\"Error Log\">\n            {open && (\n              <NumberedLines\n                lines={tuneInfo.trial_records[errorTrial].error\n                  .trim()\n                  .split(\"\\n\")}\n              />\n            )}\n          </DialogWithTitle>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneTable));\n","import {\n  Button,\n  CircularProgress,\n  createStyles,\n  Theme,\n  Typography,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { enableTuneTensorBoard } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(4),\n      },\n    },\n    board: {\n      width: \"100%\",\n      height: \"1000px\",\n      border: \"none\",\n    },\n    warning: {\n      fontSize: \"0.8125rem\",\n    },\n    progress: {\n      marginLeft: \"10px\",\n      marginTop: \"2px\",\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  error: state.dashboard.error,\n  tuneInfo: state.dashboard.tuneInfo,\n});\n\ntype State = {\n  tensorBoardEnabled: boolean;\n  loading: boolean;\n};\n\nconst mapDispatchToProps = dashboardActions;\n\nclass TuneTensorBoard extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  state: State = {\n    tensorBoardEnabled: false,\n    loading: false,\n  };\n\n  enableTensorBoard() {\n    enableTuneTensorBoard();\n    this.setState({\n      tensorBoardEnabled: true,\n    });\n  }\n\n  handleSubmit = () => {\n    this.setState({ loading: true });\n    enableTuneTensorBoard().then(() => {\n      this.setState({ loading: false });\n    });\n  };\n\n  tensorBoard = () => {\n    const { classes, error, tuneInfo } = this.props;\n\n    return (\n      <div>\n        {error === \"TypeError: Failed to fetch\" && (\n          <Typography className={classes.warning} color=\"textSecondary\">\n            Warning: Tensorboard server closed. View Tensorboard by running\n            \"tensorboard --logdir\" if not displaying below.\n          </Typography>\n        )}\n        {tuneInfo && !tuneInfo.tensorboard.tensorboard_current && (\n          <Typography className={classes.warning} color=\"textSecondary\">\n            The below Tensorboard reflects a previously entered log directory.\n            Restart the Ray Dashboard to change the Tensorboard logdir.\n          </Typography>\n        )}\n        <iframe\n          src=\"http://localhost:6006/\"\n          className={classes.board}\n          title=\"TensorBoard\"\n        ></iframe>\n      </div>\n    );\n  };\n\n  render() {\n    const { classes, tuneInfo } = this.props;\n\n    const { loading } = this.state;\n\n    if (tuneInfo === null) {\n      return;\n    }\n    const enabled = tuneInfo.tensorboard.tensorboard_enabled;\n    return (\n      <div className={classes.root}>\n        {!enabled && (\n          <div>\n            <Button\n              variant=\"outlined\"\n              onClick={this.handleSubmit}\n              className={classes.warning}\n            >\n              Enable TensorBoard\n            </Button>\n            {loading && (\n              <CircularProgress className={classes.progress} size={25} />\n            )}\n          </div>\n        )}\n\n        {enabled && this.tensorBoard()}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TuneTensorBoard));\n","import {\n  Button,\n  CircularProgress,\n  createStyles,\n  Tab,\n  Tabs,\n  TextField,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTuneInfo, setTuneExperiment } from \"../../../api\";\nimport { StoreState } from \"../../../store\";\nimport { dashboardActions } from \"../state\";\nimport TuneErrors from \"./TuneErrors\";\nimport TuneTable from \"./TuneTable\";\nimport TuneTensorBoard from \"./TuneTensorBoard\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    tabs: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n    },\n    heading: {\n      fontsize: \"0.9em\",\n      marginTop: theme.spacing(2),\n    },\n    warning: {\n      fontSize: \"1em\",\n    },\n    warningIcon: {\n      fontSize: \"1.25em\",\n      verticalAlign: \"text-bottom\",\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    submit: {\n      marginLeft: theme.spacing(2),\n      fontSize: \"0.8125em\",\n    },\n    prompt: {\n      fontSize: \"1em\",\n      marginTop: theme.spacing(1),\n    },\n    input: {\n      width: \"85%\",\n    },\n    progress: {\n      marginLeft: theme.spacing(2),\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tuneInfo: state.dashboard.tuneInfo,\n  tuneAvailability: state.dashboard.tuneAvailability,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\ntype State = {\n  tabIndex: number;\n  experiment: string;\n  loading: boolean;\n};\n\nclass Tune extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps,\n  State\n> {\n  timeout: number = 0;\n\n  state: State = {\n    tabIndex: 0,\n    experiment: \"\",\n    loading: false,\n  };\n\n  refreshTuneInfo = async () => {\n    try {\n      if (\n        this.props.tuneAvailability &&\n        this.props.tuneAvailability.available\n      ) {\n        const tuneInfo = await getTuneInfo();\n        this.props.setTuneInfo(tuneInfo);\n      }\n    } catch (error) {\n      this.props.setError(error.toString());\n    } finally {\n      this.timeout = window.setTimeout(this.refreshTuneInfo, 1000);\n    }\n  };\n\n  async componentWillUnmount() {\n    window.clearTimeout(this.timeout);\n  }\n\n  handleTabChange = (event: React.ChangeEvent<{}>, value: number) => {\n    this.setState({\n      tabIndex: value,\n    });\n  };\n\n  handleExperimentChange = (event: React.ChangeEvent<{ value: any }>) => {\n    this.setState({\n      experiment: event.target.value,\n    });\n  };\n\n  handleExperimentSubmit = async () => {\n    this.setState({ loading: true });\n    try {\n      await setTuneExperiment(this.state.experiment);\n      window.clearTimeout(this.timeout);\n      await this.refreshTuneInfo();\n      this.setState({ loading: false });\n    } catch (error) {\n      this.props.setError(error.toString());\n      this.setState({ loading: false });\n    }\n  };\n\n  experimentChoice = (prompt: boolean) => {\n    const { classes } = this.props;\n\n    const { loading } = this.state;\n    return (\n      <div>\n        {prompt && (\n          <Typography className={classes.heading} color=\"textPrimary\">\n            You can use this tab to monitor Tune jobs, their statuses,\n            hyperparameters, and more. For more information, read the\n            documentation{\" \"}\n            <a href=\"https://docs.ray.io/en/latest/ray-dashboard.html#tune\">\n              here\n            </a>\n            .\n          </Typography>\n        )}\n        <div>\n          <Typography className={classes.prompt} color=\"textSecondary\">\n            Enter Tune Log Directory Here:\n          </Typography>\n          <TextField\n            className={classes.input}\n            id=\"standard-basic\"\n            value={this.state.experiment}\n            onChange={this.handleExperimentChange}\n          />\n          <Button\n            className={classes.submit}\n            variant=\"outlined\"\n            onClick={this.handleExperimentSubmit}\n          >\n            Submit\n          </Button>\n          {loading && (\n            <CircularProgress className={classes.progress} size={25} />\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { classes, tuneInfo, tuneAvailability } = this.props;\n\n    if (tuneAvailability && !tuneAvailability.trials_available) {\n      return this.experimentChoice(true);\n    }\n\n    const { tabIndex } = this.state;\n\n    const tabs = [\n      { label: \"Table\", component: TuneTable },\n      { label: \"TensorBoard\", component: TuneTensorBoard },\n    ];\n\n    if (tuneInfo !== null && Object.keys(tuneInfo.errors).length > 0) {\n      tabs.push({ label: \"Errors\", component: TuneErrors });\n    }\n\n    const SelectedComponent = tabs[tabIndex].component;\n    return (\n      <div className={classes.root}>\n        {this.experimentChoice(false)}\n        <Tabs\n          className={classes.tabs}\n          indicatorColor=\"primary\"\n          onChange={this.handleTabChange}\n          textColor=\"primary\"\n          value={tabIndex}\n        >\n          {tabs.map(({ label }) => (\n            <Tab key={label} label={label} />\n          ))}\n        </Tabs>\n        <SelectedComponent />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(Tune));\n","import {\n  createStyles,\n  Tab,\n  Tabs,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  getMemoryTable,\n  getNodeInfo,\n  getRayletInfo,\n  getTuneAvailability,\n  stopMemoryTableCollection,\n} from \"../../api\";\nimport { StoreState } from \"../../store\";\nimport LastUpdated from \"./LastUpdated\";\nimport LogicalView from \"./logical-view/LogicalView\";\nimport MemoryInfo from \"./memory/Memory\";\nimport NodeInfo from \"./node-info/NodeInfo\";\nimport RayConfig from \"./ray-config/RayConfig\";\nimport { dashboardActions } from \"./state\";\nimport Tune from \"./tune/Tune\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(4),\n      },\n    },\n    tabs: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n    },\n  });\n\nconst mapStateToProps = (state: StoreState) => ({\n  tab: state.dashboard.tab,\n  tuneAvailability: state.dashboard.tuneAvailability,\n  shouldObtainMemoryTable: state.dashboard.shouldObtainMemoryTable,\n});\n\nconst mapDispatchToProps = dashboardActions;\n\nclass Dashboard extends React.Component<\n  WithStyles<typeof styles> &\n    ReturnType<typeof mapStateToProps> &\n    typeof mapDispatchToProps\n> {\n  timeoutId = 0;\n  tabs = [\n    { label: \"Machine view\", component: NodeInfo },\n    { label: \"Logical view\", component: LogicalView },\n    { label: \"Memory\", component: MemoryInfo },\n    { label: \"Ray config\", component: RayConfig },\n    { label: \"Tune\", component: Tune },\n  ];\n\n  refreshInfo = async () => {\n    const { shouldObtainMemoryTable } = this.props;\n    try {\n      const [\n        nodeInfo,\n        rayletInfo,\n        memoryTable,\n        tuneAvailability,\n      ] = await Promise.all([\n        getNodeInfo(),\n        getRayletInfo(),\n        getMemoryTable(shouldObtainMemoryTable),\n        getTuneAvailability(),\n      ]);\n      this.props.setNodeAndRayletInfo({ nodeInfo, rayletInfo });\n      this.props.setTuneAvailability(tuneAvailability);\n      this.props.setError(null);\n      if (shouldObtainMemoryTable) {\n        this.props.setMemoryTable(memoryTable);\n      }\n    } catch (error) {\n      this.props.setError(error.toString());\n    } finally {\n      this.timeoutId = window.setTimeout(this.refreshInfo, 1000);\n    }\n  };\n\n  async componentDidMount() {\n    await this.refreshInfo();\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeoutId);\n  }\n\n  handleTabChange = async (event: React.ChangeEvent<{}>, value: number) => {\n    this.props.setTab(value);\n    if (this.tabs[value].label === \"Memory\") {\n      this.props.setShouldObtainMemoryTable(true);\n    } else {\n      this.props.setShouldObtainMemoryTable(false);\n      await stopMemoryTableCollection();\n    }\n  };\n\n  render() {\n    const { classes, tab, tuneAvailability } = this.props;\n    const tabs = this.tabs.slice();\n\n    // if Tune information is not available, remove Tune tab from the dashboard\n    if (tuneAvailability === null || !tuneAvailability.available) {\n      tabs.splice(4);\n    }\n\n    const SelectedComponent = tabs[tab].component;\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h5\">Ray Dashboard</Typography>\n        <Tabs\n          className={classes.tabs}\n          indicatorColor=\"primary\"\n          onChange={this.handleTabChange}\n          textColor=\"primary\"\n          value={tab}\n        >\n          {tabs.map(({ label }) => (\n            <Tab key={label} label={label} />\n          ))}\n        </Tabs>\n        <SelectedComponent />\n        <LastUpdated />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(Dashboard));\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { dashboardReducer } from \"./pages/dashboard/state\";\n\nexport const store = configureStore({\n  reducer: {\n    dashboard: dashboardReducer,\n  },\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport type StoreState = ReturnType<typeof store.getState>;\n","import { CssBaseline } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Dashboard from \"./pages/dashboard/Dashboard\";\nimport { store } from \"./store\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <CssBaseline />\n          <Route component={Dashboard} exact path=\"/\" />\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}