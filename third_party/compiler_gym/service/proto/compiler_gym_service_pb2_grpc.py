# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from compiler_gym.service.proto import (
    compiler_gym_service_pb2 as compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2,
)


class CompilerGymServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetVersion = channel.unary_unary(
            "/compiler_gym.CompilerGymService/GetVersion",
            request_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetVersionRequest.SerializeToString,
            response_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetVersionReply.FromString,
        )
        self.GetSpaces = channel.unary_unary(
            "/compiler_gym.CompilerGymService/GetSpaces",
            request_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetSpacesRequest.SerializeToString,
            response_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetSpacesReply.FromString,
        )
        self.StartSession = channel.unary_unary(
            "/compiler_gym.CompilerGymService/StartSession",
            request_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StartSessionRequest.SerializeToString,
            response_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StartSessionReply.FromString,
        )
        self.ForkSession = channel.unary_unary(
            "/compiler_gym.CompilerGymService/ForkSession",
            request_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.ForkSessionRequest.SerializeToString,
            response_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.ForkSessionReply.FromString,
        )
        self.EndSession = channel.unary_unary(
            "/compiler_gym.CompilerGymService/EndSession",
            request_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.EndSessionRequest.SerializeToString,
            response_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.EndSessionReply.FromString,
        )
        self.Step = channel.unary_unary(
            "/compiler_gym.CompilerGymService/Step",
            request_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StepRequest.SerializeToString,
            response_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StepReply.FromString,
        )
        self.AddBenchmark = channel.unary_unary(
            "/compiler_gym.CompilerGymService/AddBenchmark",
            request_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.AddBenchmarkRequest.SerializeToString,
            response_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.AddBenchmarkReply.FromString,
        )


class CompilerGymServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetVersion(self, request, context):
        """Request version strings from the service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetSpaces(self, request, context):
        """Request the action and observation spaces that this service supports. The
        service responds with an initial action space, and a list of available
        observation and reward spaces.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StartSession(self, request, context):
        """Start a new CompilerGym service session. This allocates a new session on
        the service and returns a session ID. To terminate the session, call
        EndSession() once done. Raises grpc::StatusCode::NOT_FOUND if the requested
        benchmark URI is not found.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ForkSession(self, request, context):
        """Fork a session. This creates a new session in exactly the same state. The
        new session must be terminated with EndSession() once done. This returns
        an error if the session to fork does not exist.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EndSession(self, request, context):
        """End a CompilerGym service session. If the requested session does not exist,
        this returns an error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Step(self, request, context):
        """Apply a list of optimization decisions and compute a list of observations
        for a session. Optimization decisions are selected from the last
        ActionSpace returned by a call to GetSpaces() or Step(). Valid observations
        are queried using GetSpaces(). This returns an error if the requested
        session does not exist.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddBenchmark(self, request, context):
        """Register a new benchmark.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CompilerGymServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetVersion": grpc.unary_unary_rpc_method_handler(
            servicer.GetVersion,
            request_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetVersionRequest.FromString,
            response_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetVersionReply.SerializeToString,
        ),
        "GetSpaces": grpc.unary_unary_rpc_method_handler(
            servicer.GetSpaces,
            request_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetSpacesRequest.FromString,
            response_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetSpacesReply.SerializeToString,
        ),
        "StartSession": grpc.unary_unary_rpc_method_handler(
            servicer.StartSession,
            request_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StartSessionRequest.FromString,
            response_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StartSessionReply.SerializeToString,
        ),
        "ForkSession": grpc.unary_unary_rpc_method_handler(
            servicer.ForkSession,
            request_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.ForkSessionRequest.FromString,
            response_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.ForkSessionReply.SerializeToString,
        ),
        "EndSession": grpc.unary_unary_rpc_method_handler(
            servicer.EndSession,
            request_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.EndSessionRequest.FromString,
            response_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.EndSessionReply.SerializeToString,
        ),
        "Step": grpc.unary_unary_rpc_method_handler(
            servicer.Step,
            request_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StepRequest.FromString,
            response_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StepReply.SerializeToString,
        ),
        "AddBenchmark": grpc.unary_unary_rpc_method_handler(
            servicer.AddBenchmark,
            request_deserializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.AddBenchmarkRequest.FromString,
            response_serializer=compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.AddBenchmarkReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "compiler_gym.CompilerGymService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CompilerGymService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetVersion(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/compiler_gym.CompilerGymService/GetVersion",
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetVersionRequest.SerializeToString,
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetVersionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetSpaces(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/compiler_gym.CompilerGymService/GetSpaces",
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetSpacesRequest.SerializeToString,
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.GetSpacesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def StartSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/compiler_gym.CompilerGymService/StartSession",
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StartSessionRequest.SerializeToString,
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StartSessionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ForkSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/compiler_gym.CompilerGymService/ForkSession",
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.ForkSessionRequest.SerializeToString,
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.ForkSessionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EndSession(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/compiler_gym.CompilerGymService/EndSession",
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.EndSessionRequest.SerializeToString,
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.EndSessionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Step(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/compiler_gym.CompilerGymService/Step",
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StepRequest.SerializeToString,
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.StepReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AddBenchmark(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/compiler_gym.CompilerGymService/AddBenchmark",
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.AddBenchmarkRequest.SerializeToString,
            compiler__gym_dot_service_dot_proto_dot_compiler__gym__service__pb2.AddBenchmarkReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
