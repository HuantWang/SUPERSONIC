// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: schedule.proto
// Original file comments:
// 生成python头文件的命令
// python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. schedule.proto
// 生成c++头文件的命令 服务类和消息类
// protoc -I ./ --grpc_out=. --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` schedule.proto
// protoc -I ./ --cpp_out=. schedule.proto
//
#ifndef GRPC_schedule_2eproto__INCLUDED
#define GRPC_schedule_2eproto__INCLUDED

#include "schedule.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class ScheduleService final {
 public:
  static constexpr char const* service_full_name() {
    return "ScheduleService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // halide方法
    virtual ::grpc::Status init(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::ScheduleInitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleInitResponse>> Asyncinit(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleInitResponse>>(AsyncinitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleInitResponse>> PrepareAsyncinit(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleInitResponse>>(PrepareAsyncinitRaw(context, request, cq));
    }
    virtual ::grpc::Status step(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::ScheduleStepResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleStepResponse>> Asyncstep(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleStepResponse>>(AsyncstepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleStepResponse>> PrepareAsyncstep(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleStepResponse>>(PrepareAsyncstepRaw(context, request, cq));
    }
    virtual ::grpc::Status reset(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::ScheduleResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleResetResponse>> Asyncreset(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleResetResponse>>(AsyncresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleResetResponse>> PrepareAsyncreset(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleResetResponse>>(PrepareAsyncresetRaw(context, request, cq));
    }
    virtual ::grpc::Status render(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::ScheduleRenderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleRenderResponse>> Asyncrender(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleRenderResponse>>(AsyncrenderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleRenderResponse>> PrepareAsyncrender(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleRenderResponse>>(PrepareAsyncrenderRaw(context, request, cq));
    }
    virtual ::grpc::Status close(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::ScheduleCloseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleCloseResponse>> Asyncclose(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleCloseResponse>>(AsynccloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleCloseResponse>> PrepareAsyncclose(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleCloseResponse>>(PrepareAsynccloseRaw(context, request, cq));
    }
    // tvm方法
    virtual ::grpc::Status GetTvm(::grpc::ClientContext* context, const ::TvmRequest& request, ::TvmResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TvmResponse>> AsyncGetTvm(::grpc::ClientContext* context, const ::TvmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TvmResponse>>(AsyncGetTvmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TvmResponse>> PrepareAsyncGetTvm(::grpc::ClientContext* context, const ::TvmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TvmResponse>>(PrepareAsyncGetTvmRaw(context, request, cq));
    }
    // stoke方法
    virtual ::grpc::Status GetStokeMsg(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::MsgStokeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MsgStokeResponse>> AsyncGetStokeMsg(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MsgStokeResponse>>(AsyncGetStokeMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MsgStokeResponse>> PrepareAsyncGetStokeMsg(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MsgStokeResponse>>(PrepareAsyncGetStokeMsgRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleInitResponse>* AsyncinitRaw(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleInitResponse>* PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleStepResponse>* AsyncstepRaw(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleStepResponse>* PrepareAsyncstepRaw(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleResetResponse>* AsyncresetRaw(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleResetResponse>* PrepareAsyncresetRaw(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleRenderResponse>* AsyncrenderRaw(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleRenderResponse>* PrepareAsyncrenderRaw(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleCloseResponse>* AsynccloseRaw(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ScheduleCloseResponse>* PrepareAsynccloseRaw(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TvmResponse>* AsyncGetTvmRaw(::grpc::ClientContext* context, const ::TvmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TvmResponse>* PrepareAsyncGetTvmRaw(::grpc::ClientContext* context, const ::TvmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MsgStokeResponse>* AsyncGetStokeMsgRaw(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MsgStokeResponse>* PrepareAsyncGetStokeMsgRaw(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status init(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::ScheduleInitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleInitResponse>> Asyncinit(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleInitResponse>>(AsyncinitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleInitResponse>> PrepareAsyncinit(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleInitResponse>>(PrepareAsyncinitRaw(context, request, cq));
    }
    ::grpc::Status step(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::ScheduleStepResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleStepResponse>> Asyncstep(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleStepResponse>>(AsyncstepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleStepResponse>> PrepareAsyncstep(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleStepResponse>>(PrepareAsyncstepRaw(context, request, cq));
    }
    ::grpc::Status reset(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::ScheduleResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleResetResponse>> Asyncreset(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleResetResponse>>(AsyncresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleResetResponse>> PrepareAsyncreset(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleResetResponse>>(PrepareAsyncresetRaw(context, request, cq));
    }
    ::grpc::Status render(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::ScheduleRenderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleRenderResponse>> Asyncrender(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleRenderResponse>>(AsyncrenderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleRenderResponse>> PrepareAsyncrender(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleRenderResponse>>(PrepareAsyncrenderRaw(context, request, cq));
    }
    ::grpc::Status close(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::ScheduleCloseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleCloseResponse>> Asyncclose(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleCloseResponse>>(AsynccloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleCloseResponse>> PrepareAsyncclose(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ScheduleCloseResponse>>(PrepareAsynccloseRaw(context, request, cq));
    }
    ::grpc::Status GetTvm(::grpc::ClientContext* context, const ::TvmRequest& request, ::TvmResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TvmResponse>> AsyncGetTvm(::grpc::ClientContext* context, const ::TvmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TvmResponse>>(AsyncGetTvmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TvmResponse>> PrepareAsyncGetTvm(::grpc::ClientContext* context, const ::TvmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TvmResponse>>(PrepareAsyncGetTvmRaw(context, request, cq));
    }
    ::grpc::Status GetStokeMsg(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::MsgStokeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MsgStokeResponse>> AsyncGetStokeMsg(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MsgStokeResponse>>(AsyncGetStokeMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MsgStokeResponse>> PrepareAsyncGetStokeMsg(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MsgStokeResponse>>(PrepareAsyncGetStokeMsgRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::ScheduleInitResponse>* AsyncinitRaw(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ScheduleInitResponse>* PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ScheduleStepResponse>* AsyncstepRaw(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ScheduleStepResponse>* PrepareAsyncstepRaw(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ScheduleResetResponse>* AsyncresetRaw(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ScheduleResetResponse>* PrepareAsyncresetRaw(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ScheduleRenderResponse>* AsyncrenderRaw(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ScheduleRenderResponse>* PrepareAsyncrenderRaw(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ScheduleCloseResponse>* AsynccloseRaw(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ScheduleCloseResponse>* PrepareAsynccloseRaw(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TvmResponse>* AsyncGetTvmRaw(::grpc::ClientContext* context, const ::TvmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TvmResponse>* PrepareAsyncGetTvmRaw(::grpc::ClientContext* context, const ::TvmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MsgStokeResponse>* AsyncGetStokeMsgRaw(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MsgStokeResponse>* PrepareAsyncGetStokeMsgRaw(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_init_;
    const ::grpc::internal::RpcMethod rpcmethod_step_;
    const ::grpc::internal::RpcMethod rpcmethod_reset_;
    const ::grpc::internal::RpcMethod rpcmethod_render_;
    const ::grpc::internal::RpcMethod rpcmethod_close_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTvm_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStokeMsg_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // halide方法
    virtual ::grpc::Status init(::grpc::ServerContext* context, const ::ScheduleInitRequest* request, ::ScheduleInitResponse* response);
    virtual ::grpc::Status step(::grpc::ServerContext* context, const ::ScheduleStepRequest* request, ::ScheduleStepResponse* response);
    virtual ::grpc::Status reset(::grpc::ServerContext* context, const ::ScheduleResetRequest* request, ::ScheduleResetResponse* response);
    virtual ::grpc::Status render(::grpc::ServerContext* context, const ::ScheduleRenderRequest* request, ::ScheduleRenderResponse* response);
    virtual ::grpc::Status close(::grpc::ServerContext* context, const ::ScheduleCloseRequest* request, ::ScheduleCloseResponse* response);
    // tvm方法
    virtual ::grpc::Status GetTvm(::grpc::ServerContext* context, const ::TvmRequest* request, ::TvmResponse* response);
    // stoke方法
    virtual ::grpc::Status GetStokeMsg(::grpc::ServerContext* context, const ::MsgStokeRequest* request, ::MsgStokeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_init() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* context, const ::ScheduleInitRequest* request, ::ScheduleInitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit(::grpc::ServerContext* context, ::ScheduleInitRequest* request, ::grpc::ServerAsyncResponseWriter< ::ScheduleInitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_step() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status step(::grpc::ServerContext* context, const ::ScheduleStepRequest* request, ::ScheduleStepResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststep(::grpc::ServerContext* context, ::ScheduleStepRequest* request, ::grpc::ServerAsyncResponseWriter< ::ScheduleStepResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_reset() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* context, const ::ScheduleResetRequest* request, ::ScheduleResetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreset(::grpc::ServerContext* context, ::ScheduleResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::ScheduleResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_render() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status render(::grpc::ServerContext* context, const ::ScheduleRenderRequest* request, ::ScheduleRenderResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrender(::grpc::ServerContext* context, ::ScheduleRenderRequest* request, ::grpc::ServerAsyncResponseWriter< ::ScheduleRenderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_close() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* context, const ::ScheduleCloseRequest* request, ::ScheduleCloseResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclose(::grpc::ServerContext* context, ::ScheduleCloseRequest* request, ::grpc::ServerAsyncResponseWriter< ::ScheduleCloseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTvm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTvm() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetTvm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTvm(::grpc::ServerContext* context, const ::TvmRequest* request, ::TvmResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTvm(::grpc::ServerContext* context, ::TvmRequest* request, ::grpc::ServerAsyncResponseWriter< ::TvmResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStokeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetStokeMsg() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetStokeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStokeMsg(::grpc::ServerContext* context, const ::MsgStokeRequest* request, ::MsgStokeResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStokeMsg(::grpc::ServerContext* context, ::MsgStokeRequest* request, ::grpc::ServerAsyncResponseWriter< ::MsgStokeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_init<WithAsyncMethod_step<WithAsyncMethod_reset<WithAsyncMethod_render<WithAsyncMethod_close<WithAsyncMethod_GetTvm<WithAsyncMethod_GetStokeMsg<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_init() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* context, const ::ScheduleInitRequest* request, ::ScheduleInitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_step() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status step(::grpc::ServerContext* context, const ::ScheduleStepRequest* request, ::ScheduleStepResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_reset() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status reset(::grpc::ServerContext* context, const ::ScheduleResetRequest* request, ::ScheduleResetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_render() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status render(::grpc::ServerContext* context, const ::ScheduleRenderRequest* request, ::ScheduleRenderResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_close() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status close(::grpc::ServerContext* context, const ::ScheduleCloseRequest* request, ::ScheduleCloseResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTvm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTvm() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetTvm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTvm(::grpc::ServerContext* context, const ::TvmRequest* request, ::TvmResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStokeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetStokeMsg() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetStokeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStokeMsg(::grpc::ServerContext* context, const ::MsgStokeRequest* request, ::MsgStokeResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_init() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::ScheduleInitRequest, ::ScheduleInitResponse>(std::bind(&WithStreamedUnaryMethod_init<BaseClass>::Streamedinit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init(::grpc::ServerContext* context, const ::ScheduleInitRequest* request, ::ScheduleInitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ScheduleInitRequest,::ScheduleInitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_step() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::ScheduleStepRequest, ::ScheduleStepResponse>(std::bind(&WithStreamedUnaryMethod_step<BaseClass>::Streamedstep, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status step(::grpc::ServerContext* context, const ::ScheduleStepRequest* request, ::ScheduleStepResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ScheduleStepRequest,::ScheduleStepResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_reset() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::ScheduleResetRequest, ::ScheduleResetResponse>(std::bind(&WithStreamedUnaryMethod_reset<BaseClass>::Streamedreset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status reset(::grpc::ServerContext* context, const ::ScheduleResetRequest* request, ::ScheduleResetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ScheduleResetRequest,::ScheduleResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_render() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::ScheduleRenderRequest, ::ScheduleRenderResponse>(std::bind(&WithStreamedUnaryMethod_render<BaseClass>::Streamedrender, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status render(::grpc::ServerContext* context, const ::ScheduleRenderRequest* request, ::ScheduleRenderResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrender(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ScheduleRenderRequest,::ScheduleRenderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_close() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::ScheduleCloseRequest, ::ScheduleCloseResponse>(std::bind(&WithStreamedUnaryMethod_close<BaseClass>::Streamedclose, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status close(::grpc::ServerContext* context, const ::ScheduleCloseRequest* request, ::ScheduleCloseResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ScheduleCloseRequest,::ScheduleCloseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTvm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTvm() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::TvmRequest, ::TvmResponse>(std::bind(&WithStreamedUnaryMethod_GetTvm<BaseClass>::StreamedGetTvm, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTvm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTvm(::grpc::ServerContext* context, const ::TvmRequest* request, ::TvmResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTvm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TvmRequest,::TvmResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStokeMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetStokeMsg() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::MsgStokeRequest, ::MsgStokeResponse>(std::bind(&WithStreamedUnaryMethod_GetStokeMsg<BaseClass>::StreamedGetStokeMsg, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStokeMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStokeMsg(::grpc::ServerContext* context, const ::MsgStokeRequest* request, ::MsgStokeResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStokeMsg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MsgStokeRequest,::MsgStokeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_init<WithStreamedUnaryMethod_step<WithStreamedUnaryMethod_reset<WithStreamedUnaryMethod_render<WithStreamedUnaryMethod_close<WithStreamedUnaryMethod_GetTvm<WithStreamedUnaryMethod_GetStokeMsg<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_init<WithStreamedUnaryMethod_step<WithStreamedUnaryMethod_reset<WithStreamedUnaryMethod_render<WithStreamedUnaryMethod_close<WithStreamedUnaryMethod_GetTvm<WithStreamedUnaryMethod_GetStokeMsg<Service > > > > > > > StreamedService;
};


#endif  // GRPC_schedule_2eproto__INCLUDED
