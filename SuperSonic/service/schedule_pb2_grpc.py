""" Generated by the protocol buffer compiler.  DO NOT EDIT!
source: schedule.proto
"""
import grpc

from . import schedule_pb2 as schedule__pb2


class ScheduleServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.init = channel.unary_unary(
            "/ScheduleService/init",
            request_serializer=schedule__pb2.ScheduleInitRequest.SerializeToString,
            response_deserializer=schedule__pb2.ScheduleInitResponse.FromString,
        )
        self.step = channel.unary_unary(
            "/ScheduleService/step",
            request_serializer=schedule__pb2.ScheduleStepRequest.SerializeToString,
            response_deserializer=schedule__pb2.ScheduleStepResponse.FromString,
        )
        self.reset = channel.unary_unary(
            "/ScheduleService/reset",
            request_serializer=schedule__pb2.ScheduleResetRequest.SerializeToString,
            response_deserializer=schedule__pb2.ScheduleResetResponse.FromString,
        )
        self.render = channel.unary_unary(
            "/ScheduleService/render",
            request_serializer=schedule__pb2.ScheduleRenderRequest.SerializeToString,
            response_deserializer=schedule__pb2.ScheduleRenderResponse.FromString,
        )
        self.close = channel.unary_unary(
            "/ScheduleService/close",
            request_serializer=schedule__pb2.ScheduleCloseRequest.SerializeToString,
            response_deserializer=schedule__pb2.ScheduleCloseResponse.FromString,
        )
        self.GetTvm = channel.unary_unary(
            "/ScheduleService/GetTvm",
            request_serializer=schedule__pb2.TvmRequest.SerializeToString,
            response_deserializer=schedule__pb2.TvmResponse.FromString,
        )
        self.GetStokeMsg = channel.unary_unary(
            "/ScheduleService/GetStokeMsg",
            request_serializer=schedule__pb2.MsgStokeRequest.SerializeToString,
            response_deserializer=schedule__pb2.MsgStokeResponse.FromString,
        )


class ScheduleServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def init(self, request, context):
        """halide方法
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def step(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def reset(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def render(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def close(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTvm(self, request, context):
        """tvm方法
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetStokeMsg(self, request, context):
        """stoke方法
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ScheduleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "init": grpc.unary_unary_rpc_method_handler(
            servicer.init,
            request_deserializer=schedule__pb2.ScheduleInitRequest.FromString,
            response_serializer=schedule__pb2.ScheduleInitResponse.SerializeToString,
        ),
        "step": grpc.unary_unary_rpc_method_handler(
            servicer.step,
            request_deserializer=schedule__pb2.ScheduleStepRequest.FromString,
            response_serializer=schedule__pb2.ScheduleStepResponse.SerializeToString,
        ),
        "reset": grpc.unary_unary_rpc_method_handler(
            servicer.reset,
            request_deserializer=schedule__pb2.ScheduleResetRequest.FromString,
            response_serializer=schedule__pb2.ScheduleResetResponse.SerializeToString,
        ),
        "render": grpc.unary_unary_rpc_method_handler(
            servicer.render,
            request_deserializer=schedule__pb2.ScheduleRenderRequest.FromString,
            response_serializer=schedule__pb2.ScheduleRenderResponse.SerializeToString,
        ),
        "close": grpc.unary_unary_rpc_method_handler(
            servicer.close,
            request_deserializer=schedule__pb2.ScheduleCloseRequest.FromString,
            response_serializer=schedule__pb2.ScheduleCloseResponse.SerializeToString,
        ),
        "GetTvm": grpc.unary_unary_rpc_method_handler(
            servicer.GetTvm,
            request_deserializer=schedule__pb2.TvmRequest.FromString,
            response_serializer=schedule__pb2.TvmResponse.SerializeToString,
        ),
        "GetStokeMsg": grpc.unary_unary_rpc_method_handler(
            servicer.GetStokeMsg,
            request_deserializer=schedule__pb2.MsgStokeRequest.FromString,
            response_serializer=schedule__pb2.MsgStokeResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ScheduleService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
