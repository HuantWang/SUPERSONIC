// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: schedule.proto

#include "schedule.pb.h"
#include "schedule.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* ScheduleService_method_names[] = {
  "/ScheduleService/init",
  "/ScheduleService/step",
  "/ScheduleService/reset",
  "/ScheduleService/render",
  "/ScheduleService/close",
  "/ScheduleService/GetTvm",
  "/ScheduleService/GetStokeMsg",
};

std::unique_ptr< ScheduleService::Stub> ScheduleService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ScheduleService::Stub> stub(new ScheduleService::Stub(channel));
  return stub;
}

ScheduleService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_init_(ScheduleService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_step_(ScheduleService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reset_(ScheduleService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_render_(ScheduleService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_close_(ScheduleService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTvm_(ScheduleService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStokeMsg_(ScheduleService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ScheduleService::Stub::init(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::ScheduleInitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_init_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ScheduleInitResponse>* ScheduleService::Stub::AsyncinitRaw(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ScheduleInitResponse>::Create(channel_.get(), cq, rpcmethod_init_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ScheduleInitResponse>* ScheduleService::Stub::PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::ScheduleInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ScheduleInitResponse>::Create(channel_.get(), cq, rpcmethod_init_, context, request, false);
}

::grpc::Status ScheduleService::Stub::step(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::ScheduleStepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_step_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ScheduleStepResponse>* ScheduleService::Stub::AsyncstepRaw(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ScheduleStepResponse>::Create(channel_.get(), cq, rpcmethod_step_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ScheduleStepResponse>* ScheduleService::Stub::PrepareAsyncstepRaw(::grpc::ClientContext* context, const ::ScheduleStepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ScheduleStepResponse>::Create(channel_.get(), cq, rpcmethod_step_, context, request, false);
}

::grpc::Status ScheduleService::Stub::reset(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::ScheduleResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_reset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ScheduleResetResponse>* ScheduleService::Stub::AsyncresetRaw(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ScheduleResetResponse>::Create(channel_.get(), cq, rpcmethod_reset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ScheduleResetResponse>* ScheduleService::Stub::PrepareAsyncresetRaw(::grpc::ClientContext* context, const ::ScheduleResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ScheduleResetResponse>::Create(channel_.get(), cq, rpcmethod_reset_, context, request, false);
}

::grpc::Status ScheduleService::Stub::render(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::ScheduleRenderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_render_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ScheduleRenderResponse>* ScheduleService::Stub::AsyncrenderRaw(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ScheduleRenderResponse>::Create(channel_.get(), cq, rpcmethod_render_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ScheduleRenderResponse>* ScheduleService::Stub::PrepareAsyncrenderRaw(::grpc::ClientContext* context, const ::ScheduleRenderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ScheduleRenderResponse>::Create(channel_.get(), cq, rpcmethod_render_, context, request, false);
}

::grpc::Status ScheduleService::Stub::close(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::ScheduleCloseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_close_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ScheduleCloseResponse>* ScheduleService::Stub::AsynccloseRaw(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ScheduleCloseResponse>::Create(channel_.get(), cq, rpcmethod_close_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ScheduleCloseResponse>* ScheduleService::Stub::PrepareAsynccloseRaw(::grpc::ClientContext* context, const ::ScheduleCloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ScheduleCloseResponse>::Create(channel_.get(), cq, rpcmethod_close_, context, request, false);
}

::grpc::Status ScheduleService::Stub::GetTvm(::grpc::ClientContext* context, const ::TvmRequest& request, ::TvmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTvm_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::TvmResponse>* ScheduleService::Stub::AsyncGetTvmRaw(::grpc::ClientContext* context, const ::TvmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::TvmResponse>::Create(channel_.get(), cq, rpcmethod_GetTvm_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TvmResponse>* ScheduleService::Stub::PrepareAsyncGetTvmRaw(::grpc::ClientContext* context, const ::TvmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::TvmResponse>::Create(channel_.get(), cq, rpcmethod_GetTvm_, context, request, false);
}

::grpc::Status ScheduleService::Stub::GetStokeMsg(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::MsgStokeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStokeMsg_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::MsgStokeResponse>* ScheduleService::Stub::AsyncGetStokeMsgRaw(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MsgStokeResponse>::Create(channel_.get(), cq, rpcmethod_GetStokeMsg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MsgStokeResponse>* ScheduleService::Stub::PrepareAsyncGetStokeMsgRaw(::grpc::ClientContext* context, const ::MsgStokeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MsgStokeResponse>::Create(channel_.get(), cq, rpcmethod_GetStokeMsg_, context, request, false);
}

ScheduleService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::ScheduleInitRequest, ::ScheduleInitResponse>(
          std::mem_fn(&ScheduleService::Service::init), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::ScheduleStepRequest, ::ScheduleStepResponse>(
          std::mem_fn(&ScheduleService::Service::step), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::ScheduleResetRequest, ::ScheduleResetResponse>(
          std::mem_fn(&ScheduleService::Service::reset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::ScheduleRenderRequest, ::ScheduleRenderResponse>(
          std::mem_fn(&ScheduleService::Service::render), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::ScheduleCloseRequest, ::ScheduleCloseResponse>(
          std::mem_fn(&ScheduleService::Service::close), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::TvmRequest, ::TvmResponse>(
          std::mem_fn(&ScheduleService::Service::GetTvm), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::MsgStokeRequest, ::MsgStokeResponse>(
          std::mem_fn(&ScheduleService::Service::GetStokeMsg), this)));
}

ScheduleService::Service::~Service() {
}

::grpc::Status ScheduleService::Service::init(::grpc::ServerContext* context, const ::ScheduleInitRequest* request, ::ScheduleInitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ScheduleService::Service::step(::grpc::ServerContext* context, const ::ScheduleStepRequest* request, ::ScheduleStepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ScheduleService::Service::reset(::grpc::ServerContext* context, const ::ScheduleResetRequest* request, ::ScheduleResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ScheduleService::Service::render(::grpc::ServerContext* context, const ::ScheduleRenderRequest* request, ::ScheduleRenderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ScheduleService::Service::close(::grpc::ServerContext* context, const ::ScheduleCloseRequest* request, ::ScheduleCloseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ScheduleService::Service::GetTvm(::grpc::ServerContext* context, const ::TvmRequest* request, ::TvmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ScheduleService::Service::GetStokeMsg(::grpc::ServerContext* context, const ::MsgStokeRequest* request, ::MsgStokeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


