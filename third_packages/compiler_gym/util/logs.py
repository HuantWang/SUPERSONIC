# Copyright (c) Facebook, Inc. and its affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.
import os
from datetime import datetime
from pathlib import Path
from typing import NamedTuple

# File names of generated logs.
METADATA_NAME = "random_search.json"
PROGRESS_LOG_NAME = "random_search_progress.csv"
BEST_ACTIONS_NAME = "random_search_best_actions.txt"
BEST_COMMANDLINE_NAME = "random_search_best_actions_commandline.txt"
# The name of the LLVM bitcode file generated by
BEST_ACTIONS_PROGRESS_NAME = "random_search_best_actions_progress.csv"


def create_logging_dir(name: str) -> Path:
    """Create a directory for writing logs to.

    Defaults to ~/logs/compiler_gym base directory, set
    $COMPILER_GYM_LOGS=/path/to/dir to override this.

    Usage:
        >>> create_logging_dir("my_script")
        Path("~/logs/compiler_gym/my_script/2020-11-03T11:00:00")

    :param name: The grouping name for the logs.
    :return: The path of a logging directory.
    """
    logging_base_dir = os.environ.get("COMPILER_GYM_LOGS", "~/logs/compiler_gym")
    logging_base_dir = Path(logging_base_dir).expanduser()
    logging_base_dir = logging_base_dir / name

    timestamp = datetime.now().isoformat()

    logging_dir = logging_base_dir / timestamp
    logging_dir.mkdir(parents=True)

    # Create a symlink to the "latest" logs results.
    if (logging_base_dir / "latest").exists():
        os.unlink(logging_base_dir / "latest")
    os.symlink(timestamp, logging_base_dir / "latest")

    return logging_dir


class ProgressLogEntry(NamedTuple):
    """A snapshot of incremental search progress."""

    runtime_seconds: float
    total_episode_count: int
    total_step_count: int
    num_passes: int
    reward: float

    def to_csv(self) -> str:
        return ",".join(
            [
                f"{self.runtime_seconds:.3f}",
                str(self.total_episode_count),
                str(self.total_step_count),
                str(self.num_passes),
                str(self.reward),
            ]
        )

    @classmethod
    def from_csv(cls, line: str) -> "ProgressLogEntry":
        (
            runtime_seconds,
            total_episode_count,
            total_step_count,
            num_passes,
            reward,
        ) = line.split(",")
        return ProgressLogEntry(
            float(runtime_seconds),
            int(total_episode_count),
            int(total_step_count),
            int(num_passes),
            float(reward),
        )
